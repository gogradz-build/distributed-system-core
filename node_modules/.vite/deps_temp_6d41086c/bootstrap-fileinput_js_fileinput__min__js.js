import {
  require_jquery
} from "./chunk-W4PKAJRH.js";
import {
  __commonJS
} from "./chunk-PLDDJCW6.js";

// node_modules/bootstrap-fileinput/js/fileinput.min.js
var require_fileinput_min = __commonJS({
  "node_modules/bootstrap-fileinput/js/fileinput.min.js"(exports, module) {
    !function(e) {
      "use strict";
      "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof module && "object" == typeof module.exports ? e(require_jquery()) : e(window.jQuery);
    }(function(e) {
      "use strict";
      var t, a;
      e.fn.fileinputLocales = {}, e.fn.fileinputThemes = {}, e.fn.fileinputBsVersion || (e.fn.fileinputBsVersion = window.bootstrap && window.bootstrap.Alert && window.bootstrap.Alert.VERSION || window.Alert && window.Alert.VERSION || "3.x.x"), String.prototype.setTokens = function(e2) {
        var t2, i2, a2 = this.toString();
        for (t2 in e2) e2.hasOwnProperty(t2) && (i2 = new RegExp("{" + t2 + "}", "g"), a2 = a2.replace(i2, e2[t2]));
        return a2;
      }, Array.prototype.flatMap || (Array.prototype.flatMap = function(e2) {
        return [].concat(this.map(e2));
      }), t = { FRAMES: ".kv-preview-thumb", SORT_CSS: "file-sortable", INIT_FLAG: "init-", SCRIPT_SRC: document && document.currentScript && document.currentScript.src || null, OBJECT_PARAMS: '<param name="controller" value="true" />\n<param name="allowFullScreen" value="true" />\n<param name="allowScriptAccess" value="always" />\n<param name="autoPlay" value="false" />\n<param name="autoStart" value="false" />\n<param name="quality" value="high" />\n', DEFAULT_PREVIEW: '<div class="file-preview-other">\n<span class="{previewFileIconClass}">{previewFileIcon}</span>\n</div>', MODAL_ID: "kvFileinputModal", MODAL_EVENTS: ["show", "shown", "hide", "hidden", "loaded"], logMessages: { ajaxError: "{status}: {error}. Error Details: {text}.", badDroppedFiles: "Error scanning dropped files!", badExifParser: "Error loading the piexif.js library. {details}", badInputType: 'The input "type" must be set to "file" for initializing the "bootstrap-fileinput" plugin.', exifWarning: 'To avoid this warning, either set "autoOrientImage" to "false" OR ensure you have loaded the "piexif.js" library correctly on your page before the "fileinput.js" script.', invalidChunkSize: 'Invalid upload chunk size: "{chunkSize}". Resumable uploads are disabled.', invalidThumb: 'Invalid thumb frame with id: "{id}".', noResumableSupport: "The browser does not support resumable or chunk uploads.", noUploadUrl: 'The "uploadUrl" is not set. Ajax uploads and resumable uploads have been disabled.', retryStatus: "Retrying upload for chunk # {chunk} for {filename}... retry # {retry}.", chunkQueueError: "Could not push task to ajax pool for chunk index # {index}.", resumableMaxRetriesReached: "Maximum resumable ajax retries ({n}) reached.", resumableRetryError: "Could not retry the resumable request (try # {n})... aborting.", resumableAborting: "Aborting / cancelling the resumable request.", resumableRequestError: "Error processing resumable request. {msg}" }, objUrl: window.URL || window.webkitURL, getZoomPlaceholder: function() {
        var e2, i2 = t.SCRIPT_SRC, a2 = "?kvTemp__2873389129__=";
        return i2 ? (e2 = i2.substring(0, i2.lastIndexOf("/"))).substring(0, e2.lastIndexOf("/") + 1) + "img/loading.gif" + a2 : a2;
      }, defaultButtonCss: function(e2) {
        return "btn-default btn-" + (e2 ? "" : "outline-") + "secondary";
      }, isBs: function(i2) {
        var a2 = t.trim((e.fn.fileinputBsVersion || "") + "");
        return i2 = parseInt(i2, 10), a2 ? i2 === parseInt(a2.charAt(0), 10) : 4 === i2;
      }, isNumeric: function(e2) {
        return void 0 !== e2 && (!isNaN(parseFloat(e2)) && isFinite(e2));
      }, trim: function(e2) {
        return void 0 === e2 ? "" : e2.toString().trim();
      }, now: function() {
        return (/* @__PURE__ */ new Date()).getTime();
      }, round: function(e2) {
        return e2 = parseFloat(e2), isNaN(e2) ? 0 : Math.floor(Math.round(e2));
      }, getArray: function(e2) {
        var t2, i2 = [], a2 = e2 && e2.length || 0;
        for (t2 = 0; t2 < a2; t2++) i2.push(e2[t2]);
        return i2;
      }, getFileRelativePath: function(e2) {
        return String(e2.newPath || e2.relativePath || e2.webkitRelativePath || t.getFileName(e2) || null);
      }, getFileId: function(e2, i2) {
        var a2 = t.getFileRelativePath(e2);
        return "function" == typeof i2 ? i2(e2) : e2 && a2 ? e2.size + "_" + encodeURIComponent(a2).replace(/%/g, "_") : null;
      }, getFrameSelector: function(e2, t2) {
        return '[id="' + e2 + '"]' + (t2 = t2 || "");
      }, getZoomSelector: function(e2, i2) {
        return t.getFrameSelector("zoom-" + e2, i2);
      }, getFrameElement: function(e2, i2, a2) {
        return e2.find(t.getFrameSelector(i2, a2));
      }, getZoomElement: function(e2, i2, a2) {
        return e2.find(t.getZoomSelector(i2, a2));
      }, getElapsed: function(i2) {
        var a2 = i2, r2 = "", s2 = {}, n = { year: 31536e3, month: 2592e3, week: 604800, day: 86400, hour: 3600, minute: 60, second: 1 };
        return t.getObjectKeys(n).forEach(function(e2) {
          s2[e2] = Math.floor(a2 / n[e2]), a2 -= s2[e2] * n[e2];
        }), e.each(s2, function(e2, t2) {
          t2 > 0 && (r2 += (r2 ? " " : "") + t2 + e2.substring(0, 1));
        }), r2;
      }, debounce: function(e2, t2) {
        var i2;
        return function() {
          var a2 = arguments, r2 = this;
          clearTimeout(i2), i2 = setTimeout(function() {
            e2.apply(r2, a2);
          }, t2);
        };
      }, stopEvent: function(e2) {
        e2.stopPropagation(), e2.preventDefault();
      }, getFileName: function(e2) {
        return e2 && (e2.fileName || e2.name) || "";
      }, createObjectURL: function(e2) {
        return t.objUrl && t.objUrl.createObjectURL && e2 ? t.objUrl.createObjectURL(e2) : "";
      }, revokeObjectURL: function(e2) {
        t.objUrl && t.objUrl.revokeObjectURL && e2 && t.objUrl.revokeObjectURL(e2);
      }, compare: function(e2, t2, i2) {
        return void 0 !== e2 && (i2 ? e2 === t2 : e2.match(t2));
      }, isIE: function(e2) {
        var t2, i2;
        return "Microsoft Internet Explorer" === navigator.appName && (10 === e2 ? new RegExp("msie\\s" + e2, "i").test(navigator.userAgent) : ((t2 = document.createElement("div")).innerHTML = "<!--[if IE " + e2 + "]> <i></i> <![endif]-->", i2 = t2.getElementsByTagName("i").length, document.body.appendChild(t2), t2.parentNode.removeChild(t2), i2));
      }, canOrientImage: function(t2) {
        var i2 = e(document.createElement("img")).css({ width: "1px", height: "1px" }).insertAfter(t2), a2 = i2.css("image-orientation");
        return i2.remove(), !!a2;
      }, canAssignFilesToInput: function() {
        var e2 = document.createElement("input");
        try {
          return e2.type = "file", e2.files = null, true;
        } catch (e3) {
          return false;
        }
      }, getDragDropFolders: function(e2) {
        var t2, i2, a2 = e2 ? e2.length : 0, r2 = 0;
        if (a2 > 0 && e2[0].webkitGetAsEntry()) for (t2 = 0; t2 < a2; t2++) (i2 = e2[t2].webkitGetAsEntry()) && i2.isDirectory && r2++;
        return r2;
      }, initModal: function(t2) {
        var i2 = e("body");
        i2.length && t2.appendTo(i2);
      }, isFunction: function(e2) {
        return "function" == typeof e2;
      }, isEmpty: function(i2, a2) {
        return null == i2 || "" === i2 || (t.isString(i2) && a2 ? "" === t.trim(i2) : t.isArray(i2) ? 0 === i2.length : !(!e.isPlainObject(i2) || !e.isEmptyObject(i2)));
      }, isArray: function(e2) {
        return Array.isArray(e2) || "[object Array]" === Object.prototype.toString.call(e2);
      }, isString: function(e2) {
        return "[object String]" === Object.prototype.toString.call(e2);
      }, ifSet: function(e2, t2, i2) {
        return i2 = i2 || "", t2 && "object" == typeof t2 && e2 in t2 ? t2[e2] : i2;
      }, cleanArray: function(e2) {
        return e2 instanceof Array || (e2 = []), e2.filter(function(e3) {
          return null != e3;
        });
      }, spliceArray: function(t2, i2, a2) {
        var r2, s2, n = 0, o = [];
        if (!(t2 instanceof Array)) return [];
        for (s2 = e.extend(true, [], t2), a2 && s2.reverse(), r2 = 0; r2 < s2.length; r2++) r2 !== i2 && (o[n] = s2[r2], n++);
        return a2 && o.reverse(), o;
      }, getNum: function(e2, t2) {
        return t2 = t2 || 0, "number" == typeof e2 ? e2 : ("string" == typeof e2 && (e2 = parseFloat(e2)), isNaN(e2) ? t2 : e2);
      }, hasFileAPISupport: function() {
        return !(!window.File || !window.FileReader);
      }, hasDragDropSupport: function() {
        var e2 = document.createElement("div");
        return !t.isIE(9) && (void 0 !== e2.draggable || void 0 !== e2.ondragstart && void 0 !== e2.ondrop);
      }, hasFileUploadSupport: function() {
        return t.hasFileAPISupport() && window.FormData;
      }, hasBlobSupport: function() {
        try {
          return !!window.Blob && Boolean(new Blob());
        } catch (e2) {
          return false;
        }
      }, hasArrayBufferViewSupport: function() {
        try {
          return 100 === new Blob([new Uint8Array(100)]).size;
        } catch (e2) {
          return false;
        }
      }, hasResumableUploadSupport: function() {
        return t.hasFileUploadSupport() && t.hasBlobSupport() && t.hasArrayBufferViewSupport() && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false);
      }, dataURI2Blob: function(e2) {
        var i2, a2, r2, s2, n, o, l = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder, d = t.hasBlobSupport();
        if (!((d || l) && window.atob && window.ArrayBuffer && window.Uint8Array)) return null;
        for (i2 = e2.split(",")[0].indexOf("base64") >= 0 ? atob(e2.split(",")[1]) : decodeURIComponent(e2.split(",")[1]), a2 = new ArrayBuffer(i2.length), r2 = new Uint8Array(a2), s2 = 0; s2 < i2.length; s2 += 1) r2[s2] = i2.charCodeAt(s2);
        return n = e2.split(",")[0].split(":")[1].split(";")[0], d ? new Blob([t.hasArrayBufferViewSupport() ? r2 : a2], { type: n }) : ((o = new l()).append(a2), o.getBlob(n));
      }, arrayBuffer2String: function(e2) {
        if (window.TextDecoder) return new TextDecoder("utf-8").decode(e2);
        var t2, i2, a2, r2, s2 = Array.prototype.slice.apply(new Uint8Array(e2)), n = "", o = 0;
        for (t2 = s2.length; o < t2; ) switch ((i2 = s2[o++]) >> 4) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
            n += String.fromCharCode(i2);
            break;
          case 12:
          case 13:
            a2 = s2[o++], n += String.fromCharCode((31 & i2) << 6 | 63 & a2);
            break;
          case 14:
            a2 = s2[o++], r2 = s2[o++], n += String.fromCharCode((15 & i2) << 12 | (63 & a2) << 6 | (63 & r2) << 0);
        }
        return n;
      }, isSvg: function(e2) {
        return !t.isEmpty(e2) && (0 !== (e2 = t.trim(e2).replace(/\n/g, " ")).length && (e2.match(/^\s*<\?xml/i) && (e2.match(/<!DOCTYPE svg/i) || e2.match(/<svg/i))));
      }, getMimeType: function(e2, t2, i2) {
        var a2 = e2 || "";
        switch (a2) {
          case "ffd8ffe0":
          case "ffd8ffe1":
          case "ffd8ffe2":
            return "image/jpeg";
          case "89504e47":
            return "image/png";
          case "47494638":
            return "image/gif";
          case "49492a00":
            return "image/tiff";
          case "52494646":
            return "image/webp";
          case "41433130":
            return "image/vnd.dwg";
          case "66747970":
            return "video/3gp";
          case "4f676753":
            return "video/ogg";
          case "1a45dfa3":
            return "video/mkv";
          case "000001ba":
          case "000001b3":
            return "video/mpeg";
          case "3026b275":
            return "video/wmv";
          case "25504446":
            return "application/pdf";
          case "25215053":
            return "application/ps";
          case "504b0304":
          case "504b0506":
          case "504b0508":
            return "application/zip";
          case "377abcaf":
            return "application/7z";
          case "75737461":
            return "application/tar";
          case "7801730d":
            return "application/dmg";
          default:
            switch (a2.substring(0, 6)) {
              case "435753":
                return "application/x-shockwave-flash";
              case "494433":
                return "audio/mp3";
              case "425a68":
                return "application/bzip";
              default:
                switch (a2.substring(0, 4)) {
                  case "424d":
                    return "image/bmp";
                  case "fffb":
                    return "audio/mp3";
                  case "4d5a":
                    return "application/exe";
                  case "1f9d":
                  case "1fa0":
                    return "application/zip";
                  case "1f8b":
                    return "application/gzip";
                  default:
                    return t2 && !t2.match(/[^\u0000-\u007f]/) ? "application/text-plain" : i2;
                }
            }
        }
      }, addCss: function(e2, t2) {
        e2.removeClass(t2).addClass(t2);
      }, getElement: function(i2, a2, r2) {
        return t.isEmpty(i2) || t.isEmpty(i2[a2]) ? r2 : e(i2[a2]);
      }, createDiv: function() {
        return e(document.createElement("div"));
      }, createElement: function(t2, i2) {
        return i2 = i2 || "div", e(e.parseHTML("<" + i2 + ">" + t2 + "</" + i2 + ">"));
      }, uniqId: function() {
        return ((/* @__PURE__ */ new Date()).getTime() + Math.floor(Math.random() * Math.pow(10, 15))).toString(36);
      }, cspBuffer: { CSP_ATTRIB: "data-csp-01928735", domElementsStyles: {}, stash: function(i2) {
        var a2 = this, r2 = e.parseHTML("<div>" + i2 + "</div>"), s2 = e(r2);
        return s2.find("[style]").each(function(i3, r3) {
          var s3 = e(r3), n = s3[0].style, o = t.uniqId(), l = {};
          n && n.length && (e(n).each(function() {
            l[this] = n[this];
          }), a2.domElementsStyles[o] = l, s3.removeAttr("style").attr(a2.CSP_ATTRIB, o));
        }), s2.filter("*").removeAttr("style"), (Object.values ? Object.values(r2) : Object.keys(r2).map(function(e2) {
          return r2[e2];
        })).flatMap(function(e2) {
          return e2.innerHTML;
        }).join("");
      }, apply: function(t2) {
        var i2 = this;
        e(t2).find("[" + i2.CSP_ATTRIB + "]").each(function(t3, a2) {
          var r2 = e(a2), s2 = r2.attr(i2.CSP_ATTRIB), n = i2.domElementsStyles[s2];
          n && r2.css(n), r2.removeAttr(i2.CSP_ATTRIB);
        }), i2.domElementsStyles = {};
      } }, setHtml: function(e2, i2) {
        var a2 = t.cspBuffer;
        return e2.html(a2.stash(i2)), a2.apply(e2), e2;
      }, htmlEncode: function(e2, t2) {
        return void 0 === e2 ? t2 || null : e2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
      }, replaceTags: function(t2, i2) {
        var a2 = t2;
        return i2 ? (e.each(i2, function(e2, t3) {
          "function" == typeof t3 && (t3 = t3()), a2 = a2.split(e2).join(t3);
        }), a2) : a2;
      }, cleanMemory: function(e2) {
        var i2 = e2.is("img") ? e2.attr("src") : e2.find("source").attr("src");
        t.revokeObjectURL(i2);
      }, findFileName: function(e2) {
        var t2 = e2.lastIndexOf("/");
        return -1 === t2 && (t2 = e2.lastIndexOf("\\")), e2.split(e2.substring(t2, t2 + 1)).pop();
      }, checkFullScreen: function() {
        return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      }, toggleFullScreen: function(e2) {
        var i2 = document, a2 = i2.documentElement, r2 = t.checkFullScreen();
        a2 && e2 && !r2 ? a2.requestFullscreen ? a2.requestFullscreen() : a2.msRequestFullscreen ? a2.msRequestFullscreen() : a2.mozRequestFullScreen ? a2.mozRequestFullScreen() : a2.webkitRequestFullscreen && a2.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : r2 && (i2.exitFullscreen ? i2.exitFullscreen() : i2.msExitFullscreen ? i2.msExitFullscreen() : i2.mozCancelFullScreen ? i2.mozCancelFullScreen() : i2.webkitExitFullscreen && i2.webkitExitFullscreen());
      }, moveArray: function(t2, i2, a2, r2) {
        var s2 = e.extend(true, [], t2);
        if (r2 && s2.reverse(), a2 >= s2.length) for (var n = a2 - s2.length; 1 + n--; ) s2.push(void 0);
        return s2.splice(a2, 0, s2.splice(i2, 1)[0]), r2 && s2.reverse(), s2;
      }, closeButton: function(e2) {
        return '<button type="button" class="' + (e2 = (t.isBs(5) ? "btn-close" : "close") + (e2 ? " " + e2 : "")) + '" aria-label="Close">\n' + (t.isBs(5) ? "" : '  <span aria-hidden="true">&times;</span>\n') + "</button>";
      }, getRotation: function(e2) {
        switch (e2) {
          case 2:
            return "rotateY(180deg)";
          case 3:
            return "rotate(180deg)";
          case 4:
            return "rotate(180deg) rotateY(180deg)";
          case 5:
            return "rotate(270deg) rotateY(180deg)";
          case 6:
            return "rotate(90deg)";
          case 7:
            return "rotate(90deg) rotateY(180deg)";
          case 8:
            return "rotate(270deg)";
          default:
            return "";
        }
      }, setTransform: function(e2, t2) {
        e2 && (e2.style.transform = t2, e2.style.webkitTransform = t2, e2.style["-moz-transform"] = t2, e2.style["-ms-transform"] = t2, e2.style["-o-transform"] = t2);
      }, getObjectKeys: function(t2) {
        var i2 = [];
        return t2 && e.each(t2, function(e2) {
          i2.push(e2);
        }), i2;
      }, getObjectSize: function(e2) {
        return t.getObjectKeys(e2).length;
      }, whenAll: function(i2) {
        var a2, r2, s2, n, o, l, d = [].slice, c = 1 === arguments.length && t.isArray(i2) ? i2 : d.call(arguments), u = e.Deferred(), f = 0, p = c.length, h = p;
        for (s2 = n = o = Array(p), l = function(e2, t2, i3) {
          return function() {
            i3 !== c && f++, u.notifyWith(t2[e2] = this, i3[e2] = d.call(arguments)), --h || u[(f ? "reject" : "resolve") + "With"](t2, i3);
          };
        }, a2 = 0; a2 < p; a2++) (r2 = c[a2]) && t.isFunction(r2.promise) ? r2.promise().done(l(a2, o, c)).fail(l(a2, s2, n)) : (u.notifyWith(this, r2), --h);
        return h || u.resolveWith(o, c), u.promise();
      } }, (a = function(i2, a2) {
        this.$element = e(i2), this.$parent = this.$element.parent(), this._validate() && (this.isPreviewable = t.hasFileAPISupport(), this.isIE9 = t.isIE(9), this.isIE10 = t.isIE(10), (this.isPreviewable || this.isIE9) && (this._init(a2), this._listen()), this.$element.removeClass("file-loading"));
      }).prototype = { constructor: a, _cleanup: function() {
        this.reader = null, this.clearFileStack(), this.fileBatchCompleted = true, this.isError = false, this.isDuplicateError = false, this.isPersistentError = false, this.cancelling = false, this.paused = false, this.lastProgress = 0, this._initAjax();
      }, _isAborted: function() {
        return this.cancelling || this.paused;
      }, _initAjax: function() {
        var i2 = this.taskManager = { pool: {}, addPool: function(e2) {
          return i2.pool[e2] = new i2.TasksPool(e2);
        }, getPool: function(e2) {
          return i2.pool[e2];
        }, addTask: function(e2, t2) {
          return new i2.Task(e2, t2);
        }, TasksPool: function(a2) {
          var r2 = this;
          r2.id = a2, r2.cancelled = false, r2.cancelledDeferrer = e.Deferred(), r2.tasks = {}, r2.addTask = function(e2, t2) {
            return r2.tasks[e2] = new i2.Task(e2, t2);
          }, r2.size = function() {
            return t.getObjectSize(r2.tasks);
          }, r2.run = function(i3) {
            var a3, s2, n, o = 0, l = false, d = t.getObjectKeys(r2.tasks).map(function(e2) {
              return r2.tasks[e2];
            }), c = [], u = e.Deferred();
            if (r2.cancelled) return r2.cancelledDeferrer.resolve(), u.reject();
            if (!i3) {
              var f = t.getObjectKeys(r2.tasks).map(function(e2) {
                return r2.tasks[e2].deferred;
              });
              return t.whenAll(f).done(function() {
                var e2 = t.getArray(arguments);
                r2.cancelled ? (u.reject.apply(null, e2), r2.cancelledDeferrer.resolve()) : (u.resolve.apply(null, e2), r2.cancelledDeferrer.reject());
              }).fail(function() {
                var e2 = t.getArray(arguments);
                u.reject.apply(null, e2), r2.cancelled ? r2.cancelledDeferrer.resolve() : r2.cancelledDeferrer.reject();
              }), e.each(r2.tasks, function(e2) {
                (a3 = r2.tasks[e2]).run();
              }), u;
            }
            for (s2 = function(t2) {
              e.when(t2.deferred).fail(function() {
                l = true, n.apply(null, arguments);
              }).always(n);
            }, n = function() {
              var e2 = t.getArray(arguments);
              if (u.notify(e2), c.push(e2), r2.cancelled) return u.reject.apply(null, c), void r2.cancelledDeferrer.resolve();
              c.length === r2.size() && (l ? u.reject.apply(null, c) : u.resolve.apply(null, c)), d.length && (a3 = d.shift(), s2(a3), a3.run());
            }; d.length && o++ < i3; ) a3 = d.shift(), s2(a3), a3.run();
            return u;
          }, r2.cancel = function() {
            return r2.cancelled = true, r2.cancelledDeferrer;
          };
        }, Task: function(i3, a2) {
          var r2 = this;
          r2.id = i3, r2.deferred = e.Deferred(), r2.logic = a2, r2.context = null, r2.run = function() {
            var e2 = t.getArray(arguments);
            return e2.unshift(r2.deferred), a2.apply(r2.context, e2), r2.deferred;
          }, r2.runWithContext = function(e2) {
            return r2.context = e2, r2.run();
          };
        } };
        this.ajaxQueue = [], this.ajaxRequests = [], this.ajaxPool = null, this.ajaxAborted = false;
      }, _init: function(i2, a2) {
        var r2, s2, n, o, l = this, d = l.$element;
        l.options = i2, l.zoomPlaceholder = t.getZoomPlaceholder(), l.canOrientImage = t.canOrientImage(d), e.each(i2, function(e2, i3) {
          switch (e2) {
            case "minFileCount":
            case "maxFileCount":
            case "maxTotalFileCount":
            case "minFileSize":
            case "maxFileSize":
            case "maxMultipleFileSize":
            case "maxFilePreviewSize":
            case "resizeQuality":
            case "resizeIfSizeMoreThan":
            case "progressUploadThreshold":
            case "initialPreviewCount":
            case "zoomModalHeight":
            case "minImageHeight":
            case "maxImageHeight":
            case "minImageWidth":
            case "maxImageWidth":
            case "bytesToKB":
              l[e2] = t.getNum(i3);
              break;
            default:
              l[e2] = i3;
          }
        }), (!l.bytesToKB || l.bytesToKB <= 0) && (l.bytesToKB = 1024), void 0 === l.errorCloseButton && (l.errorCloseButton = t.closeButton("kv-error-close" + (t.isBs(5) ? "  float-end" : ""))), l.maxTotalFileCount > 0 && l.maxTotalFileCount < l.maxFileCount && (l.maxTotalFileCount = l.maxFileCount), l.rtl && (o = l.previewZoomButtonIcons.prev, l.previewZoomButtonIcons.prev = l.previewZoomButtonIcons.next, l.previewZoomButtonIcons.next = o), !isNaN(l.maxAjaxThreads) && l.maxAjaxThreads < l.resumableUploadOptions.maxThreads && (l.resumableUploadOptions.maxThreads = l.maxAjaxThreads), l._initFileManager(), "function" == typeof l.autoOrientImage && (l.autoOrientImage = l.autoOrientImage()), "function" == typeof l.autoOrientImageInitial && (l.autoOrientImageInitial = l.autoOrientImageInitial()), a2 || l._cleanup(), l.duplicateErrors = [], l.$form = d.closest("form"), l._initTemplateDefaults(), l.uploadFileAttr = t.isEmpty(d.attr("name")) ? "file_data" : d.attr("name"), n = l._getLayoutTemplate("progress"), l.progressTemplate = n.replace("{class}", l.progressClass), l.progressInfoTemplate = n.replace("{class}", l.progressInfoClass), l.progressPauseTemplate = n.replace("{class}", l.progressPauseClass), l.progressCompleteTemplate = n.replace("{class}", l.progressCompleteClass), l.progressErrorTemplate = n.replace("{class}", l.progressErrorClass), l.isDisabled = d.attr("disabled") || d.attr("readonly"), l.isDisabled && d.attr("disabled", true), l.isClickable = l.browseOnZoneClick && l.showPreview && (l.dropZoneEnabled || !t.isEmpty(l.defaultPreviewContent)), l.isAjaxUpload = t.hasFileUploadSupport() && !t.isEmpty(l.uploadUrl), l.dropZoneEnabled = t.hasDragDropSupport() && l.dropZoneEnabled, l.isAjaxUpload || (l.dropZoneEnabled = l.dropZoneEnabled && t.canAssignFilesToInput()), l.slug = "function" == typeof i2.slugCallback ? i2.slugCallback : l._slugDefault, l.mainTemplate = l.showCaption ? l._getLayoutTemplate("main1") : l._getLayoutTemplate("main2"), l.captionTemplate = l._getLayoutTemplate("caption"), l.previewGenericTemplate = l._getPreviewTemplate("generic"), !l.imageCanvas && l.resizeImage && (l.maxImageWidth || l.maxImageHeight) && (l.imageCanvas = document.createElement("canvas"), l.imageCanvasContext = l.imageCanvas.getContext("2d")), t.isEmpty(d.attr("id")) && d.attr("id", t.uniqId()), l.namespace = ".fileinput_" + d.attr("id").replace(/-/g, "_"), void 0 === l.$container ? l.$container = l._createContainer() : l._refreshContainer(), s2 = l.$container, l.$dropZone = s2.find(".file-drop-zone"), l.$progress = s2.find(".kv-upload-progress"), l.$btnUpload = s2.find(".fileinput-upload"), l.$captionContainer = t.getElement(i2, "elCaptionContainer", s2.find(".file-caption")), l.$caption = t.getElement(i2, "elCaptionText", s2.find(".file-caption-name")), t.isEmpty(l.msgPlaceholder) || (r2 = d.attr("multiple") ? l.filePlural : l.fileSingle, l.$caption.attr("placeholder", l.msgPlaceholder.replace("{files}", r2))), l.$captionIcon = l.$captionContainer.find(".file-caption-icon"), l.$previewContainer = t.getElement(i2, "elPreviewContainer", s2.find(".file-preview")), l.$preview = t.getElement(i2, "elPreviewImage", s2.find(".file-preview-thumbnails")), l.$previewStatus = t.getElement(i2, "elPreviewStatus", s2.find(".file-preview-status")), l.$errorContainer = t.getElement(i2, "elErrorContainer", l.$previewContainer.find(".kv-fileinput-error")), l._validateDisabled(), t.isEmpty(l.msgErrorClass) || t.addCss(l.$errorContainer, l.msgErrorClass), a2 ? l._errorsExist() || l.$errorContainer.hide() : (l._resetErrors(), l.$errorContainer.hide(), l.previewInitId = "thumb-" + d.attr("id"), l._initPreviewCache(), l._initPreview(true), l._initPreviewActions(), l.$parent.hasClass("file-loading") && (l.$container.insertBefore(l.$parent), l.$parent.remove())), l._setFileDropZoneTitle(), d.attr("disabled") && l.disable(), l._initZoom(), l.hideThumbnailContent && t.addCss(l.$preview, "hide-content");
      }, _initFileManager: function() {
        var i2 = this;
        i2.uploadStartTime = t.now(), i2.fileManager = { stack: {}, filesProcessed: [], errors: [], loadedImages: {}, totalImages: 0, totalFiles: null, totalSize: null, uploadedSize: 0, stats: {}, bpsLog: [], bps: 0, initStats: function(e2) {
          var a2 = { started: t.now() };
          e2 ? i2.fileManager.stats[e2] = a2 : i2.fileManager.stats = a2;
        }, getUploadStats: function(e2, a2, r2) {
          var s2, n = i2.fileManager, o = e2 ? n.stats[e2] && n.stats[e2].started || t.now() : i2.uploadStartTime, l = (t.now() - o) / 1e3, d = Math.ceil(l ? a2 / l : 0), c = r2 - a2, u = n.bpsLog.length ? i2.bitrateUpdateDelay : 0;
          return setTimeout(function() {
            var e3, t2, i3, a3 = 0, r3 = 0;
            for (n.bpsLog.push(d), n.bpsLog.sort(function(e4, t3) {
              return e4 - t3;
            }), i3 = (t2 = n.bpsLog.length) > 10 ? t2 - 10 : Math.ceil(t2 / 2), e3 = t2; e3 > i3; e3--) r3 = parseFloat(n.bpsLog[e3]), a3++;
            n.bps = 64 * (a3 > 0 ? r3 / a3 : 0);
          }, u), s2 = { fileId: e2, started: o, elapsed: l, loaded: a2, total: r2, bps: n.bps, bitrate: i2._getSize(n.bps, false, i2.bitRateUnits), pendingBytes: c }, e2 ? n.stats[e2] = s2 : n.stats = s2, s2;
        }, exists: function(t2) {
          return -1 !== e.inArray(t2, i2.fileManager.getIdList());
        }, count: function() {
          return i2.fileManager.getIdList().length;
        }, total: function() {
          var e2 = i2.fileManager;
          return e2.totalFiles || (e2.totalFiles = e2.count()), e2.totalFiles;
        }, getTotalSize: function() {
          var t2 = i2.fileManager;
          return t2.totalSize ? t2.totalSize : (t2.totalSize = 0, e.each(i2.getFileStack(), function(e2, i3) {
            var a2 = parseFloat(i3.size);
            t2.totalSize += isNaN(a2) ? 0 : a2;
          }), t2.totalSize);
        }, add: function(e2, a2) {
          a2 || (a2 = i2.fileManager.getId(e2)), a2 && (i2.fileManager.stack[a2] = { file: e2, name: t.getFileName(e2), relativePath: t.getFileRelativePath(e2), size: e2.size, nameFmt: i2._getFileName(e2, ""), sizeFmt: i2._getSize(e2.size) });
        }, remove: function(e2) {
          var t2 = i2._getThumbFileId(e2);
          i2.fileManager.removeFile(t2);
        }, removeFile: function(e2) {
          var t2 = i2.fileManager;
          e2 && (delete t2.stack[e2], delete t2.loadedImages[e2]);
        }, move: function(t2, a2) {
          var r2 = {}, s2 = i2.fileManager.stack;
          (t2 || a2) && t2 !== a2 && (e.each(s2, function(e2, i3) {
            e2 !== t2 && (r2[e2] = i3), e2 === a2 && (r2[t2] = s2[t2]);
          }), i2.fileManager.stack = r2);
        }, list: function() {
          var t2 = [];
          return e.each(i2.getFileStack(), function(e2, i3) {
            i3 && i3.file && t2.push(i3.file);
          }), t2;
        }, isPending: function(t2) {
          return -1 === e.inArray(t2, i2.fileManager.filesProcessed) && i2.fileManager.exists(t2);
        }, isProcessed: function() {
          var t2 = true, a2 = i2.fileManager;
          return e.each(i2.getFileStack(), function(e2) {
            a2.isPending(e2) && (t2 = false);
          }), t2;
        }, clear: function() {
          var e2 = i2.fileManager;
          i2.isDuplicateError = false, i2.isPersistentError = false, e2.totalFiles = null, e2.totalSize = null, e2.uploadedSize = 0, e2.stack = {}, e2.errors = [], e2.filesProcessed = [], e2.stats = {}, e2.bpsLog = [], e2.bps = 0, e2.clearImages();
        }, clearImages: function() {
          i2.fileManager.loadedImages = {}, i2.fileManager.totalImages = 0;
        }, addImage: function(e2, t2) {
          i2.fileManager.loadedImages[e2] = t2;
        }, removeImage: function(e2) {
          delete i2.fileManager.loadedImages[e2];
        }, getImageIdList: function() {
          return t.getObjectKeys(i2.fileManager.loadedImages);
        }, getImageCount: function() {
          return i2.fileManager.getImageIdList().length;
        }, getId: function(e2) {
          return i2._getFileId(e2);
        }, getIndex: function(e2) {
          return i2.fileManager.getIdList().indexOf(e2);
        }, getThumb: function(t2) {
          var a2 = null;
          return i2._getThumbs().each(function() {
            var r2 = e(this);
            i2._getThumbFileId(r2) === t2 && (a2 = r2);
          }), a2;
        }, getThumbIndex: function(e2) {
          var t2 = i2._getThumbFileId(e2);
          return i2.fileManager.getIndex(t2);
        }, getIdList: function() {
          return t.getObjectKeys(i2.fileManager.stack);
        }, getFile: function(e2) {
          return i2.fileManager.stack[e2] || null;
        }, getFileName: function(e2, t2) {
          var a2 = i2.fileManager.getFile(e2);
          return a2 ? t2 ? a2.nameFmt || "" : a2.name || "" : "";
        }, getFirstFile: function() {
          var e2 = i2.fileManager.getIdList(), t2 = e2 && e2.length ? e2[0] : null;
          return i2.fileManager.getFile(t2);
        }, setFile: function(e2, t2) {
          i2.fileManager.getFile(e2) ? i2.fileManager.stack[e2].file = t2 : i2.fileManager.add(t2, e2);
        }, setProcessed: function(e2) {
          i2.fileManager.filesProcessed.push(e2);
        }, getProgress: function() {
          var e2 = i2.fileManager.total(), t2 = i2.fileManager.filesProcessed.length;
          return e2 ? Math.ceil(t2 / e2 * 100) : 0;
        }, setProgress: function(e2, t2) {
          var a2 = i2.fileManager.getFile(e2);
          !isNaN(t2) && a2 && (a2.progress = t2);
        } };
      }, _setUploadData: function(i2, a2) {
        var r2 = this;
        e.each(a2, function(e2, a3) {
          var s2 = r2.uploadParamNames[e2] || e2;
          t.isArray(a3) ? i2.append(s2, a3[0], a3[1]) : i2.append(s2, a3);
        });
      }, _initResumableUpload: function() {
        var i2, a2 = this, r2 = a2.resumableUploadOptions, s2 = t.logMessages, n = a2.fileManager;
        if (a2.enableResumableUpload) if (false !== r2.fallback && "function" != typeof r2.fallback && (r2.fallback = function(e2) {
          e2._log(s2.noResumableSupport), e2.enableResumableUpload = false;
        }), t.hasResumableUploadSupport() || false === r2.fallback) {
          if (!a2.uploadUrl && a2.enableResumableUpload) return a2._log(s2.noUploadUrl), void (a2.enableResumableUpload = false);
          if (r2.chunkSize = parseFloat(r2.chunkSize), r2.chunkSize <= 0 || isNaN(r2.chunkSize)) return a2._log(s2.invalidChunkSize, { chunkSize: r2.chunkSize }), void (a2.enableResumableUpload = false);
          (i2 = a2.resumableManager = { init: function(e2, t2, s3) {
            i2.logs = [], i2.stack = [], i2.error = "", i2.id = e2, i2.file = t2.file, i2.fileName = t2.name, i2.fileIndex = s3, i2.completed = false, i2.lastProgress = 0, a2.showPreview && (i2.$thumb = n.getThumb(e2) || null, i2.$progress = i2.$btnDelete = null, i2.$thumb && i2.$thumb.length && (i2.$progress = i2.$thumb.find(".file-thumb-progress"), i2.$btnDelete = i2.$thumb.find(".kv-file-remove"))), i2.chunkSize = r2.chunkSize * a2.bytesToKB, i2.chunkCount = i2.getTotalChunks();
          }, setAjaxError: function(e2, t2, n2, o) {
            e2.responseJSON && e2.responseJSON.error && (n2 = e2.responseJSON.error.toString()), o || (i2.error = n2), r2.showErrorLog && a2._log(s2.ajaxError, { status: e2.status, error: n2, text: e2.responseText || "" });
          }, reset: function() {
            i2.stack = [], i2.chunksProcessed = {};
          }, setProcessed: function(t2) {
            var s3, o, l = i2.id, d = i2.$thumb, c = i2.$progress, u = d && d.length, f = { id: u ? d.attr("id") : "", index: n.getIndex(l), fileId: l }, p = a2.resumableUploadOptions.skipErrorsAndProceed;
            i2.completed = true, i2.lastProgress = 0, u && d.removeClass("file-uploading"), "success" === t2 ? (n.uploadedSize += i2.file.size, a2.showPreview && (a2._setProgress(101, c), a2._setThumbStatus(d, "Success"), a2._initUploadSuccess(i2.chunksProcessed[l].data, d)), n.removeFile(l), delete i2.chunksProcessed[l], a2._raise("fileuploaded", [f.id, f.index, f.fileId]), n.isProcessed() && a2._setProgress(101)) : "cancel" !== t2 && (a2.showPreview && (a2._setThumbStatus(d, "Error"), a2._setPreviewError(d, true), a2._setProgress(101, c, a2.msgProgressError), a2._setProgress(101, a2.$progress, a2.msgProgressError), a2.cancelling = !p), a2.$errorContainer.find('li[data-file-id="' + f.fileId + '"]').length || (o = { file: i2.fileName, max: r2.maxRetries, error: i2.error }, s3 = a2.msgResumableUploadRetriesExceeded.setTokens(o), e.extend(f, o), a2._showFileError(s3, f, "filemaxretries"), p && (n.removeFile(l), delete i2.chunksProcessed[l], n.isProcessed() && a2._setProgress(101)))), n.isProcessed() && i2.reset();
          }, check: function() {
            e.each(i2.logs, function(e2, t2) {
              if (!t2) return false, false;
            });
          }, processedResumables: function() {
            var e2, t2 = i2.logs, a3 = 0;
            if (!t2 || !t2.length) return 0;
            for (e2 = 0; e2 < t2.length; e2++) true === t2[e2] && a3++;
            return a3;
          }, getUploadedSize: function() {
            var e2 = i2.processedResumables() * i2.chunkSize;
            return e2 > i2.file.size ? i2.file.size : e2;
          }, getTotalChunks: function() {
            var e2 = parseFloat(i2.chunkSize);
            return !isNaN(e2) && e2 > 0 ? Math.ceil(i2.file.size / e2) : 0;
          }, getProgress: function() {
            var e2 = i2.processedResumables(), t2 = i2.chunkCount;
            return 0 === t2 ? 0 : Math.ceil(e2 / t2 * 100);
          }, checkAborted: function(e2) {
            a2._isAborted() && (clearInterval(e2), a2.unlock());
          }, upload: function() {
            var e2, r3 = n.getIdList(), s3 = "new";
            e2 = setInterval(function() {
              var o;
              if (i2.checkAborted(e2), "new" === s3 && (a2.lock(), s3 = "processing", o = r3.shift(), n.initStats(o), n.stack[o] && (i2.init(o, n.stack[o], n.getIndex(o)), i2.processUpload())), !n.isPending(o) && i2.completed && (s3 = "new"), n.isProcessed()) {
                var l = a2.$preview.find(".file-preview-initial");
                l.length && (t.addCss(l, t.SORT_CSS), a2._initSortable()), clearInterval(e2), a2._clearFileInput(), a2.unlock(), setTimeout(function() {
                  var e3 = a2.previewCache.data;
                  e3 && (a2.initialPreview = e3.content, a2.initialPreviewConfig = e3.config, a2.initialPreviewThumbTags = e3.tags), a2._raise("filebatchuploadcomplete", [a2.initialPreview, a2.initialPreviewConfig, a2.initialPreviewThumbTags, a2._getExtraData()]);
                }, a2.processDelay);
              }
            }, a2.processDelay);
          }, uploadResumable: function() {
            var e2, t2, s3 = a2.taskManager, n2 = i2.chunkCount;
            for (t2 = s3.addPool(i2.id), e2 = 0; e2 < n2; e2++) i2.logs[e2] = !(!i2.chunksProcessed[i2.id] || !i2.chunksProcessed[i2.id][e2]), i2.logs[e2] || i2.pushAjax(e2, 0);
            t2.run(r2.maxThreads).done(function() {
              i2.setProcessed("success");
            }).fail(function() {
              i2.setProcessed(t2.cancelled ? "cancel" : "error");
            });
          }, processUpload: function() {
            var s3, o, l, d, c, u, f, p = i2.id;
            r2.testUrl ? (s3 = new FormData(), o = n.stack[p], a2._setUploadData(s3, { fileId: p, fileName: o.fileName, fileSize: o.size, fileRelativePath: o.relativePath, chunkSize: i2.chunkSize, chunkCount: i2.chunkCount }), l = function(e2) {
              f = a2._getOutData(s3, e2), a2._raise("filetestbeforesend", [p, n, i2, f]);
            }, d = function(r3, o2, l2) {
              f = a2._getOutData(s3, l2, r3);
              var d2 = a2.uploadParamNames.chunksUploaded || "chunksUploaded", c2 = [p, n, i2, f];
              r3[d2] && t.isArray(r3[d2]) ? (i2.chunksProcessed[p] || (i2.chunksProcessed[p] = {}), e.each(r3[d2], function(e2, t2) {
                i2.logs[t2] = true, i2.chunksProcessed[p][t2] = true;
              }), i2.chunksProcessed[p].data = r3, a2._raise("filetestsuccess", c2)) : a2._raise("filetesterror", c2), i2.uploadResumable();
            }, c = function(e2, t2, r3) {
              f = a2._getOutData(s3, e2), a2._raise("filetestajaxerror", [p, n, i2, f]), i2.setAjaxError(e2, t2, r3, true), i2.uploadResumable();
            }, u = function() {
              a2._raise("filetestcomplete", [p, n, i2, a2._getOutData(s3)]);
            }, a2._ajaxSubmit(l, d, u, c, s3, p, i2.fileIndex, r2.testUrl)) : i2.uploadResumable();
          }, pushAjax: function(e2, t2) {
            var r3 = a2.taskManager.getPool(i2.id);
            r3.addTask(r3.size() + 1, function(e3) {
              var t3, r4 = i2.stack.shift();
              t3 = r4[0], i2.chunksProcessed[i2.id] && i2.chunksProcessed[i2.id][t3] ? a2._log(s2.chunkQueueError, { index: t3 }) : i2.sendAjax(t3, r4[1], e3);
            }), i2.stack.push([e2, t2]);
          }, sendAjax: function(e2, o, l) {
            var d, c = i2.chunkSize, u = i2.id, f = i2.file, p = i2.$thumb, h = t.logMessages, m = i2.$btnDelete, g = function(e3, t2) {
              t2 && (e3 = e3.setTokens(t2)), e3 = h.resumableRequestError.setTokens({ msg: e3 }), a2._log(e3), l.reject(e3);
            };
            if (!i2.chunksProcessed[u] || !i2.chunksProcessed[u][e2]) {
              if (o > r2.maxRetries) return g(h.resumableMaxRetriesReached, { n: r2.maxRetries }), void i2.setProcessed("error");
              var v, w, b, _, C, x, y = f[f.slice ? "slice" : f.mozSlice ? "mozSlice" : f.webkitSlice ? "webkitSlice" : "slice"](c * e2, c * (e2 + 1));
              v = new FormData(), d = n.stack[u], a2._setUploadData(v, { chunkCount: i2.chunkCount, chunkIndex: e2, chunkSize: c, chunkSizeStart: c * e2, fileBlob: [y, i2.fileName], fileId: u, fileName: i2.fileName, fileRelativePath: d.relativePath, fileSize: f.size, retryCount: o }), i2.$progress && i2.$progress.length && i2.$progress.show(), b = function(r3) {
                w = a2._getOutData(v, r3), a2.showPreview && (p.hasClass("file-preview-success") || (a2._setThumbStatus(p, "Loading"), t.addCss(p, "file-uploading")), m.attr("disabled", true)), a2._raise("filechunkbeforesend", [u, e2, o, n, i2, w]);
              }, _ = function(t2, d2, c2) {
                if (a2._isAborted()) g(h.resumableAborting);
                else {
                  w = a2._getOutData(v, c2, t2);
                  var f2 = a2.uploadParamNames.chunkIndex || "chunkIndex", p2 = [u, e2, o, n, i2, w];
                  t2.error ? (r2.showErrorLog && a2._log(s2.retryStatus, { retry: o + 1, filename: i2.fileName, chunk: e2 }), a2._raise("filechunkerror", p2), i2.pushAjax(e2, o + 1), i2.error = t2.error, g(t2.error)) : (i2.logs[t2[f2]] = true, i2.chunksProcessed[u] || (i2.chunksProcessed[u] = {}), i2.chunksProcessed[u][t2[f2]] = true, i2.chunksProcessed[u].data = t2, l.resolve.call(null, t2), a2._raise("filechunksuccess", p2), i2.check());
                }
              }, C = function(t2, r3, s3) {
                a2._isAborted() ? g(h.resumableAborting) : (w = a2._getOutData(v, t2), i2.setAjaxError(t2, r3, s3), a2._raise("filechunkajaxerror", [u, e2, o, n, i2, w]), i2.pushAjax(e2, o + 1), g(h.resumableRetryError, { n: o - 1 }));
              }, x = function() {
                a2._isAborted() || a2._raise("filechunkcomplete", [u, e2, o, n, i2, a2._getOutData(v)]);
              }, a2._ajaxSubmit(b, _, x, C, v, u, i2.fileIndex);
            }
          } }).reset();
        } else r2.fallback(a2);
      }, _initTemplateDefaults: function() {
        var i2, a2, r2, s2, n, o, l, d, c, u, f, p, h, m, g, v, w, b, _, C = this, x = function(e2, i3) {
          return '<object class="kv-preview-data file-preview-' + e2 + '" title="{caption}" data="{data}" type="' + i3 + '"' + w + ">\n" + t.DEFAULT_PREVIEW + "\n</object>\n";
        }, y = "btn btn-sm btn-kv " + t.defaultButtonCss();
        i2 = '{preview}\n<div class="kv-upload-progress kv-hidden"></div><div class="clearfix"></div>\n<div class="file-caption {class}">\n  <div class="input-group {inputGroupClass}">\n      {caption}\n<span class="file-caption-icon"></span>\n' + (t.isBs(5) ? "" : '<div class="input-group-btn input-group-append">\n') + "      {remove}\n      {cancel}\n      {pause}\n      {upload}\n      {browse}\n" + (t.isBs(5) ? "" : "    </div>\n") + "  </div>", a2 = t.closeButton("fileinput-remove"), _ = t.MODAL_ID + "Label", r2 = '<div id="' + t.MODAL_ID + '" class="file-zoom-dialog modal fade" aria-labelledby="' + _ + '" {tabIndexConfig}></div>', s2 = '<div class="modal-dialog modal-lg{rtl}" role="document">\n  <div class="modal-content">\n    <div class="modal-header kv-zoom-header">\n      <h6 class="modal-title kv-zoom-title" id="' + _ + '"><span class="kv-zoom-caption"></span> <span class="kv-zoom-size"></span></h6>\n      <div class="kv-zoom-actions">{rotate}{toggleheader}{fullscreen}{borderless}{close}</div>\n    </div>\n    <div class="floating-buttons"></div>\n    <div class="kv-zoom-body file-zoom-content {zoomFrameClass}"></div>\n{prev} {next}\n    <div class="kv-zoom-description"></div>\n  </div>\n</div>\n', n = '<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}" data-fileid="{fileid}" data-filename="{filename}" data-template="{template}" data-zoom="{zoomData}"', w = " {style}", o = x("html", "text/html"), d = x("text", "text/plain;charset=UTF-8"), g = x("pdf", "application/pdf"), l = '<img src="{data}" class="file-preview-image kv-preview-data" title="{title}" alt="{alt}"' + w + ">\n", c = '<iframe class="kv-preview-data file-preview-office" src="https://view.officeapps.live.com/op/embed.aspx?src={data}"' + w + "></iframe>", u = '<iframe class="kv-preview-data file-preview-gdocs" src="https://docs.google.com/gview?url={data}&embedded=true"' + w + "></iframe>", f = '<video class="kv-preview-data file-preview-video" controls' + w + '>\n<source src="{data}" type="{type}">\n' + t.DEFAULT_PREVIEW + "\n</video>\n", p = '<!--suppress ALL --><audio class="kv-preview-data file-preview-audio" controls' + w + '>\n<source src="{data}" type="{type}">\n' + t.DEFAULT_PREVIEW + "\n</audio>\n", h = '<embed class="kv-preview-data file-preview-flash" src="{data}" type="application/x-shockwave-flash"' + w + ">\n", m = '<object class="kv-preview-data file-preview-object file-object {typeCss}" data="{data}" type="{type}"' + w + '>\n<param name="movie" value="{caption}" />\n' + t.OBJECT_PARAMS + " " + t.DEFAULT_PREVIEW + "\n</object>\n", v = '<div class="kv-preview-data file-preview-other-frame"' + w + ">\n" + t.DEFAULT_PREVIEW + "\n</div>\n", b = { width: "100%", height: "100%", "min-height": "480px" }, C._isPdfRendered() && (g = C.pdfRendererTemplate.replace("{renderer}", C._encodeURI(C.pdfRendererUrl))), C.defaults = { layoutTemplates: { main1: i2, main2: '{preview}\n<div class="kv-upload-progress kv-hidden"></div>\n<div class="clearfix"></div>\n<span class="{class}">{remove}\n{cancel}\n{upload}\n{browse}\n</span>', preview: '<div class="file-preview {class}">\n  {close}  <div class="{dropClass} clearfix">\n    <div class="file-preview-thumbnails clearfix">\n    </div>\n    <div class="file-preview-status text-center text-success"></div>\n    <div class="kv-fileinput-error"></div>\n  </div>\n</div>', close: a2, fileIcon: '<i class="bi-file-earmark-arrow-up"></i>', caption: '<input readonly class="file-caption-name form-control {class}">\n', modalMain: r2, modal: s2, descriptionClose: '<button type="button" class="kv-desc-hide" aria-label="Close">{closeIcon}</button>', progress: '<div class="progress">\n    <div class="{class}" role="progressbar" aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n        {status}\n     </div>\n</div>{stats}', stats: '<div class="text-primary file-upload-stats"><span class="pending-time">{pendingTime}</span> <span class="upload-speed">{uploadSpeed}</span></div>', size: " <samp>({sizeText})</samp>", footer: '<div class="file-thumbnail-footer">\n    <div class="file-footer-caption" title="{caption}">\n        <div class="file-caption-info">{caption}</div>\n        <div class="file-size-info">{size}</div>\n    </div>\n    {progress}\n{indicator}\n{actions}\n</div>', indicator: '<div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>', actions: '<div class="file-actions">\n    <div class="file-footer-buttons">\n        {rotate} {download} {upload} {delete} {zoom} {other}    </div>\n</div>\n{drag}\n<div class="clearfix"></div>', actionDelete: '<button type="button" class="kv-file-remove {removeClass}" title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n', actionRotate: '<button type="button" class="kv-file-rotate {rotateClass}" title="{rotateTitle}">{rotateIcon}</button>', actionUpload: '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">{uploadIcon}</button>', actionDownload: '<a class="kv-file-download {downloadClass}" title="{downloadTitle}" href="{downloadUrl}" download="{caption}" target="_blank">{downloadIcon}</a>', actionZoom: '<button type="button" class="kv-file-zoom {zoomClass}" title="{zoomTitle}">{zoomIcon}</button>', actionDrag: '<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>', btnDefault: '<button type="{type}" title="{title}" class="{css}" {status} {tabIndexConfig}>{icon} {label}</button>', btnLink: '<a href="{href}" title="{title}" class="{css}" {status} {tabIndexConfig}>{icon} {label}</a>', btnBrowse: '<div class="{css}" {status} {tabIndexConfig}>{icon} {label}</div>', zoomCache: '<div class="kv-zoom-cache">{zoomContent}</div>' }, previewMarkupTags: { tagBefore1: '<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}" data-fileid="{fileid}" data-filename="{filename}" data-template="{template}" data-zoom="{zoomData}"><div class="kv-file-content">\n', tagBefore2: '<div class="file-preview-frame {frameClass}" id="{previewId}" data-fileindex="{fileindex}" data-fileid="{fileid}" data-filename="{filename}" data-template="{template}" data-zoom="{zoomData}" title="{caption}"><div class="kv-file-content">\n', tagAfter: "</div>{footer}\n{zoomCache}</div>\n" }, previewContentTemplates: { generic: "{content}\n", html: o, image: l, text: d, office: c, gdocs: u, video: f, audio: p, flash: h, object: m, pdf: g, other: v }, allowedPreviewTypes: ["image", "html", "text", "video", "audio", "flash", "pdf", "object"], previewTemplates: {}, previewSettings: { image: { width: "auto", height: "auto", "max-width": "100%", "max-height": "100%" }, html: { width: "213px", height: "160px" }, text: { width: "213px", height: "160px" }, office: { width: "213px", height: "160px" }, gdocs: { width: "213px", height: "160px" }, video: { width: "213px", height: "160px" }, audio: { width: "100%", height: "30px" }, flash: { width: "213px", height: "160px" }, object: { width: "213px", height: "160px" }, pdf: { width: "100%", height: "160px", position: "relative" }, other: { width: "213px", height: "160px" } }, previewSettingsSmall: { image: { width: "auto", height: "auto", "max-width": "100%", "max-height": "100%" }, html: { width: "100%", height: "160px" }, text: { width: "100%", height: "160px" }, office: { width: "100%", height: "160px" }, gdocs: { width: "100%", height: "160px" }, video: { width: "100%", height: "auto" }, audio: { width: "100%", height: "30px" }, flash: { width: "100%", height: "auto" }, object: { width: "100%", height: "auto" }, pdf: { width: "100%", height: "160px" }, other: { width: "100%", height: "160px" } }, previewZoomSettings: { image: { width: "auto", height: "auto", "max-width": "100%", "max-height": "100%" }, html: b, text: b, office: { width: "100%", height: "100%", "max-width": "100%", "min-height": "480px" }, gdocs: { width: "100%", height: "100%", "max-width": "100%", "min-height": "480px" }, video: { width: "auto", height: "100%", "max-width": "100%" }, audio: { width: "100%", height: "30px" }, flash: { width: "auto", height: "480px" }, object: { width: "auto", height: "100%", "max-width": "100%", "min-height": "480px" }, pdf: b, other: { width: "auto", height: "100%", "min-height": "480px" } }, mimeTypeAliases: { "video/quicktime": "video/mp4" }, fileTypeSettings: { image: function(e2, i3) {
          return t.compare(e2, "image.*") && !t.compare(e2, /(tiff?|wmf)$/i) || t.compare(i3, /\.(gif|png|jpe?g)$/i);
        }, html: function(e2, i3) {
          return t.compare(e2, "text/html") || t.compare(i3, /\.(htm|html)$/i);
        }, office: function(e2, i3) {
          return t.compare(e2, /(word|excel|powerpoint|office)$/i) || t.compare(i3, /\.(docx?|xlsx?|pptx?|pps|potx?)$/i);
        }, gdocs: function(e2, i3) {
          return t.compare(e2, /(word|excel|powerpoint|office|iwork-pages|tiff?)$/i) || t.compare(i3, /\.(docx?|xlsx?|pptx?|pps|potx?|rtf|ods|odt|pages|ai|dxf|ttf|tiff?|wmf|e?ps)$/i);
        }, text: function(e2, i3) {
          return t.compare(e2, "text.*") || t.compare(i3, /\.(xml|javascript)$/i) || t.compare(i3, /\.(txt|md|nfo|ini|json|php|js|css)$/i);
        }, video: function(e2, i3) {
          return t.compare(e2, "video.*") && (t.compare(e2, /(ogg|mp4|mp?g|mov|webm|3gp)$/i) || t.compare(i3, /\.(og?|mp4|webm|mp?g|mov|3gp)$/i));
        }, audio: function(e2, i3) {
          return t.compare(e2, "audio.*") && (t.compare(i3, /(ogg|mp3|mp?g|wav)$/i) || t.compare(i3, /\.(og?|mp3|mp?g|wav)$/i));
        }, flash: function(e2, i3) {
          return t.compare(e2, "application/x-shockwave-flash", true) || t.compare(i3, /\.(swf)$/i);
        }, pdf: function(e2, i3) {
          return t.compare(e2, "application/pdf", true) || t.compare(i3, /\.(pdf)$/i);
        }, object: function() {
          return true;
        }, other: function() {
          return true;
        } }, fileActionSettings: { showRemove: true, showUpload: true, showDownload: true, showZoom: true, showDrag: true, showRotate: true, removeIcon: '<i class="bi-trash"></i>', removeClass: y, removeErrorClass: "btn btn-sm btn-kv btn-danger", removeTitle: "Remove file", uploadIcon: '<i class="bi-upload"></i>', uploadClass: y, uploadTitle: "Upload file", uploadRetryIcon: '<i class="bi-cloud-arrow-up-fill"></i>', uploadRetryTitle: "Retry upload", downloadIcon: '<i class="bi-download"></i>', downloadClass: y, downloadTitle: "Download file", rotateIcon: '<i class="bi-arrow-clockwise"></i>', rotateClass: y, rotateTitle: "Rotate 90 deg. clockwise", zoomIcon: '<i class="bi-zoom-in"></i>', zoomClass: y, zoomTitle: "View Details", dragIcon: '<i class="bi-arrows-move"></i>', dragClass: "text-primary", dragTitle: "Move / Rearrange", dragSettings: {}, indicatorNew: '<i class="bi-plus-lg text-warning"></i>', indicatorSuccess: '<i class="bi-check-lg text-success"></i>', indicatorError: '<i class="bi-exclamation-lg text-danger"></i>', indicatorLoading: '<i class="bi-hourglass-bottom text-muted"></i>', indicatorPaused: '<i class="bi-pause-fill text-primary"></i>', indicatorNewTitle: "Not uploaded yet", indicatorSuccessTitle: "Uploaded", indicatorErrorTitle: "Upload Error", indicatorLoadingTitle: "Uploading &hellip;", indicatorPausedTitle: "Upload Paused" } }, e.each(C.defaults, function(t2, i3) {
          "allowedPreviewTypes" !== t2 ? C[t2] = e.extend(true, {}, i3, C[t2]) : void 0 === C.allowedPreviewTypes && (C.allowedPreviewTypes = i3);
        }), C._initPreviewTemplates();
      }, _initPreviewTemplates: function() {
        var i2, a2 = this, r2 = a2.previewMarkupTags, s2 = r2.tagAfter;
        e.each(a2.previewContentTemplates, function(e2, n) {
          t.isEmpty(a2.previewTemplates[e2]) && (i2 = r2.tagBefore2, "generic" !== e2 && "image" !== e2 || (i2 = r2.tagBefore1), a2._isPdfRendered() && "pdf" === e2 && (i2 = i2.replace("kv-file-content", "kv-file-content kv-pdf-rendered")), a2.previewTemplates[e2] = i2 + n + s2);
        });
      }, _initPreviewCache: function() {
        var i2 = this;
        i2.previewCache = { data: {}, init: function() {
          var e2 = i2.initialPreview;
          e2.length > 0 && !t.isArray(e2) && (e2 = e2.split(i2.initialPreviewDelimiter)), i2.previewCache.data = { content: e2, config: i2.initialPreviewConfig, tags: i2.initialPreviewThumbTags };
        }, count: function(e2) {
          return i2.previewCache.data && i2.previewCache.data.content ? e2 ? i2.previewCache.data.content.filter(function(e3) {
            return null !== e3;
          }).length : i2.previewCache.data.content.length : 0;
        }, get: function(e2, a2) {
          var r2, s2, n, o, l, d, c, u = t.INIT_FLAG + e2, f = i2.previewCache.data, p = f.config[e2], h = f.content[e2], m = t.ifSet("previewAsData", p, i2.initialPreviewAsData), g = p ? { title: p.title || null, alt: p.alt || null } : { title: null, alt: null }, v = function(e3, a3, r3, s3, n2, o2, l2, d2) {
            var c2 = " file-preview-initial " + t.SORT_CSS + (l2 ? " " + l2 : ""), u2 = i2.previewInitId + "-" + o2, f2 = p && p.fileId || u2;
            return i2._generatePreviewTemplate(e3, a3, r3, s3, u2, f2, false, null, null, c2, n2, o2, d2, g, p && p.zoomData || a3);
          };
          return h && h.length ? (a2 = void 0 === a2 || a2, n = t.ifSet("type", p, i2.initialPreviewFileType || "generic"), l = t.ifSet("filename", p, t.ifSet("caption", p)), d = t.ifSet("filetype", p, n), o = i2.previewCache.footer(e2, a2, p && p.size || null), c = t.ifSet("frameClass", p), r2 = m ? v(n, h, l, d, o, u, c) : v("generic", h, l, d, o, u, c, n).setTokens({ content: f.content[e2] }), f.tags.length && f.tags[e2] && (r2 = t.replaceTags(r2, f.tags[e2])), t.isEmpty(p) || t.isEmpty(p.frameAttr) || (s2 = t.createDiv(), t.setHtml(s2, r2), s2.find(".file-preview-initial").attr(p.frameAttr), r2 = s2.html(), s2.remove()), r2) : "";
        }, clean: function(e2) {
          e2.content = t.cleanArray(e2.content), e2.config = t.cleanArray(e2.config), e2.tags = t.cleanArray(e2.tags), i2.previewCache.data = e2;
        }, add: function(e2, a2, r2, s2) {
          var n, o = i2.previewCache.data;
          return e2 && e2.length ? (n = e2.length - 1, t.isArray(e2) || (e2 = e2.split(i2.initialPreviewDelimiter)), s2 && o.content ? (n = o.content.push(e2[0]) - 1, o.config[n] = a2, o.tags[n] = r2) : (o.content = e2, o.config = a2, o.tags = r2), i2.previewCache.clean(o), n) : 0;
        }, set: function(e2, a2, r2, s2) {
          var n, o = i2.previewCache.data;
          if (e2 && e2.length && (t.isArray(e2) || (e2 = e2.split(i2.initialPreviewDelimiter)), e2.filter(function(e3) {
            return null !== e3;
          }).length)) {
            if (void 0 === o.content && (o.content = []), void 0 === o.config && (o.config = []), void 0 === o.tags && (o.tags = []), s2) {
              for (n = 0; n < e2.length; n++) e2[n] && o.content.push(e2[n]);
              for (n = 0; n < a2.length; n++) a2[n] && o.config.push(a2[n]);
              for (n = 0; n < r2.length; n++) r2[n] && o.tags.push(r2[n]);
            } else o.content = e2, o.config = a2, o.tags = r2;
            i2.previewCache.clean(o);
          }
        }, unset: function(a2) {
          var r2 = i2.previewCache.count(), s2 = i2.reversePreviewOrder;
          if (r2) {
            if (1 === r2) return i2.previewCache.data.content = [], i2.previewCache.data.config = [], i2.previewCache.data.tags = [], i2.initialPreview = [], i2.initialPreviewConfig = [], void (i2.initialPreviewThumbTags = []);
            i2.previewCache.data.content = t.spliceArray(i2.previewCache.data.content, a2, s2), i2.previewCache.data.config = t.spliceArray(i2.previewCache.data.config, a2, s2), i2.previewCache.data.tags = t.spliceArray(i2.previewCache.data.tags, a2, s2);
            var n = e.extend(true, {}, i2.previewCache.data);
            i2.previewCache.clean(n);
          }
        }, out: function() {
          var e2, t2, a2 = "", r2 = i2.previewCache.count();
          if (0 === r2) return { content: "", caption: "" };
          for (e2 = 0; e2 < r2; e2++) t2 = i2.previewCache.get(e2), a2 = i2.reversePreviewOrder ? t2 + a2 : a2 + t2;
          return { content: a2, caption: i2._getMsgSelected(r2) };
        }, footer: function(e2, a2, r2) {
          var s2 = i2.previewCache.data || {};
          if (t.isEmpty(s2.content)) return "";
          (t.isEmpty(s2.config) || t.isEmpty(s2.config[e2])) && (s2.config[e2] = {}), a2 = void 0 === a2 || a2;
          var n, o = s2.config[e2], l = t.ifSet("caption", o), d = t.ifSet("width", o, "auto"), c = t.ifSet("url", o, false), u = t.ifSet("key", o, null), f = t.ifSet("fileId", o, null), p = i2.fileActionSettings, h = i2.initialPreviewShowDelete || false, m = i2.initialPreviewDownloadUrl ? i2.initialPreviewDownloadUrl + "?key=" + u + (f ? "&fileId=" + f : "") : "", g = o.downloadUrl || m, v = o.filename || o.caption || "", w = !!g, b = t.ifSet("showRemove", o, h), _ = t.ifSet("showRotate", o, t.ifSet("showRotate", p, true)), C = t.ifSet("showDownload", o, t.ifSet("showDownload", p, w)), x = t.ifSet("showZoom", o, t.ifSet("showZoom", p, true)), y = t.ifSet("showDrag", o, t.ifSet("showDrag", p, true)), T = false === c && a2;
          return C = C && false !== o.downloadUrl && !!g, n = i2._renderFileActions(o, false, C, b, _, x, y, T, c, u, true, g, v), i2._getLayoutTemplate("footer").setTokens({ progress: i2._renderThumbProgress(), actions: n, caption: l, size: i2._getSize(r2), width: d, indicator: "" });
        } }, i2.previewCache.init();
      }, _isPdfRendered: function() {
        var e2 = this.usePdfRenderer;
        return ("function" == typeof e2 ? e2() : !!e2) && this.pdfRendererUrl;
      }, _handler: function(e2, t2, i2) {
        var a2 = this.namespace, r2 = t2.split(" ").join(a2 + " ") + a2;
        e2 && e2.length && e2.off(r2).on(r2, i2);
      }, _encodeURI: function(e2) {
        return this.encodeUrl ? encodeURI(e2) : e2;
      }, _log: function(e2, t2) {
        var i2 = this.$element.attr("id");
        this.showConsoleLogs && (i2 && (e2 = '"' + i2 + '": ' + e2), e2 = "bootstrap-fileinput: " + e2, "object" == typeof t2 && (e2 = e2.setTokens(t2)), window.console && void 0 !== window.console.log ? window.console.log(e2) : window.alert(e2));
      }, _validate: function() {
        var e2 = "file" === this.$element.attr("type");
        return e2 || this._log(t.logMessages.badInputType), e2;
      }, _errorsExist: function() {
        var e2;
        return !!this.$errorContainer.find("li").length || (e2 = t.createDiv(), t.setHtml(e2, this.$errorContainer.html()), e2.find(".kv-error-close").remove(), e2.find("ul").remove(), !!t.trim(e2.text()).length);
      }, _errorHandler: function(e2, t2) {
        var i2 = this, a2 = e2.target.error, r2 = function(e3) {
          i2._showError(e3.replace("{name}", t2));
        };
        a2.code === a2.NOT_FOUND_ERR ? r2(i2.msgFileNotFound) : a2.code === a2.SECURITY_ERR ? r2(i2.msgFileSecured) : a2.code === a2.NOT_READABLE_ERR ? r2(i2.msgFileNotReadable) : a2.code === a2.ABORT_ERR ? r2(i2.msgFilePreviewAborted) : r2(i2.msgFilePreviewError);
      }, _addError: function(e2) {
        var i2 = this, a2 = i2.$errorContainer;
        e2 && a2.length && (t.setHtml(a2, i2.errorCloseButton + e2), i2._handler(a2.find(".kv-error-close"), "click", function() {
          setTimeout(function() {
            i2.showPreview && !i2.getFrames().length && i2.clear(), a2.fadeOut("slow");
          }, i2.processDelay);
        }));
      }, _setValidationError: function(e2) {
        e2 = (e2 ? e2 + " " : "") + "has-error", this.$container.removeClass(e2).addClass("has-error"), t.addCss(this.$caption, "is-invalid");
      }, _resetErrors: function(e2) {
        var t2 = this.$errorContainer, i2 = this.resumableUploadOptions.retainErrorHistory;
        this.isPersistentError || this.enableResumableUpload && i2 && !this.clearInput || (this.clearInput = false, this.isError = false, this.$container.removeClass("has-error"), this.$caption.removeClass("is-invalid is-valid file-processing"), t2.html(""), e2 ? t2.fadeOut("slow") : t2.hide());
      }, _showFolderError: function(e2) {
        var t2, i2 = this.$errorContainer;
        e2 && (this.isAjaxUpload || this._clearFileInput(), t2 = this.msgFoldersNotAllowed.replace("{n}", e2), this._addError(t2), this._setValidationError(), i2.fadeIn(this.fadeDelay), this._raise("filefoldererror", [e2, t2]));
      }, showUserError: function(e2, t2, i2) {
        var a2;
        this.uploadInitiated && (t2 && t2.fileId ? (i2 || this.$errorContainer.find('[data-file-id="' + t2.fileId + '"]').remove(), (a2 = this.fileManager.getFileName(t2.fileId)) && (e2 = "<b>" + a2 + ":</b> " + e2)) : i2 || this.$errorContainer.html(""), this._showFileError(e2, t2, "fileusererror"));
      }, _showFileError: function(e2, i2, a2) {
        var r2 = this.$errorContainer, s2 = a2 || "fileuploaderror", n = i2 && i2.fileId || "", o = i2 && i2.id ? '<li data-thumb-id="' + i2.id + '" data-file-id="' + n + '">' + e2 + "</li>" : "<li>" + e2 + "</li>";
        return 0 === r2.find("ul").length ? this._addError("<ul>" + o + "</ul>") : (r2.find("ul").append(t.cspBuffer.stash(o)), t.cspBuffer.apply(r2)), r2.fadeIn(this.fadeDelay), this._raise(s2, [i2, e2]), this._setValidationError("file-input-new"), true;
      }, _showError: function(e2, t2, i2) {
        var a2 = this.$errorContainer, r2 = i2 || "fileerror";
        return (t2 = t2 || {}).reader = this.reader, this._addError(e2), a2.fadeIn(this.fadeDelay), this._raise(r2, [t2, e2]), this.isAjaxUpload || this._clearFileInput(), this._setValidationError("file-input-new"), this.$btnUpload.attr("disabled", true), true;
      }, _noFilesError: function(e2) {
        var t2 = this.minFileCount > 1 ? this.filePlural : this.fileSingle, i2 = this.msgFilesTooLess.replace("{n}", this.minFileCount).replace("{files}", t2), a2 = this.$errorContainer;
        i2 = "<li>" + i2 + "</li>", 0 === a2.find("ul").length ? this._addError("<ul>" + i2 + "</ul>") : a2.find("ul").append(i2), this.isError = true, this._updateFileDetails(0), a2.fadeIn(this.fadeDelay), this._raise("fileerror", [e2, i2]), this._clearFileInput(), this._setValidationError();
      }, _parseError: function(e2, i2, a2, r2) {
        var s2, n, o, l = t.trim(a2 + "");
        return o = (n = i2.responseJSON && i2.responseJSON.error ? i2.responseJSON.error.toString() : "") || i2.responseText, this.cancelling && this.msgUploadAborted && (l = this.msgUploadAborted), this.showAjaxErrorDetails && o && (n ? l = t.trim(n + "") : (s2 = (o = t.trim(o.replace(/\n\s*\n/g, "\n"))).length ? "<pre>" + o + "</pre>" : "", l += l ? s2 : o)), l || (l = this.msgAjaxError.replace("{operation}", e2)), this.cancelling = false, r2 ? "<b>" + r2 + ": </b>" + l : l;
      }, _parseFileType: function(e2, i2) {
        var a2, r2, s2, n = this.allowedPreviewTypes || [];
        if ("application/text-plain" === e2) return "text";
        for (s2 = 0; s2 < n.length; s2++) if (r2 = n[s2], a2 = (0, this.fileTypeSettings[r2])(e2, i2) ? r2 : "", !t.isEmpty(a2)) return a2;
        return "other";
      }, _getPreviewIcon: function(t2) {
        var i2, a2 = this, r2 = null;
        return t2 && t2.indexOf(".") > -1 && (i2 = t2.split(".").pop(), a2.previewFileIconSettings && (r2 = a2.previewFileIconSettings[i2] || a2.previewFileIconSettings[i2.toLowerCase()] || null), a2.previewFileExtSettings && e.each(a2.previewFileExtSettings, function(e2, t3) {
          a2.previewFileIconSettings[e2] && t3(i2) && (r2 = a2.previewFileIconSettings[e2]);
        })), r2 || a2.previewFileIcon;
      }, _parseFilePreviewIcon: function(e2, t2) {
        var i2 = this._getPreviewIcon(t2), a2 = e2;
        return a2.indexOf("{previewFileIcon}") > -1 && (a2 = a2.setTokens({ previewFileIconClass: this.previewFileIconClass, previewFileIcon: i2 })), a2;
      }, _raise: function(t2, i2) {
        var a2 = e.Event(t2);
        void 0 !== i2 ? this.$element.trigger(a2, i2) : this.$element.trigger(a2);
        var r2 = a2.result, s2 = false === r2;
        if (a2.isDefaultPrevented() || s2) return false;
        if ("filebatchpreupload" === a2.type && (r2 || s2)) return this.ajaxAborted = r2, false;
        switch (t2) {
          case "filebatchuploadcomplete":
          case "filebatchuploadsuccess":
          case "fileuploaded":
          case "fileclear":
          case "filecleared":
          case "filereset":
          case "fileerror":
          case "filefoldererror":
          case "filecustomerror":
          case "filesuccessremove":
            break;
          default:
            this.ajaxAborted || (this.ajaxAborted = r2);
        }
        return true;
      }, _listenFullScreen: function(e2) {
        var t2, i2, a2 = this.$modal;
        a2 && a2.length && (t2 = a2 && a2.find(".btn-kv-fullscreen"), i2 = a2 && a2.find(".btn-kv-borderless"), t2.length && i2.length && (t2.removeClass("active").attr("aria-pressed", "false"), i2.removeClass("active").attr("aria-pressed", "false"), e2 ? t2.addClass("active").attr("aria-pressed", "true") : i2.addClass("active").attr("aria-pressed", "true"), a2.hasClass("file-zoom-fullscreen") ? this._maximizeZoomDialog() : e2 ? this._maximizeZoomDialog() : i2.removeClass("active").attr("aria-pressed", "false")));
      }, _listen: function() {
        var i2 = this, a2 = i2.$element, r2 = i2.$form, s2 = i2.$container;
        i2._handler(a2, "click", function(e2) {
          i2._initFileSelected(), a2.hasClass("file-no-browse") && (a2.data("zoneClicked") ? a2.data("zoneClicked", false) : e2.preventDefault());
        }), i2._handler(a2, "change", e.proxy(i2._change, i2)), i2._handler(i2.$caption, "paste", e.proxy(i2.paste, i2)), i2.showBrowse && (i2._handler(i2.$btnFile, "click", e.proxy(i2._browse, i2)), i2._handler(i2.$btnFile, "keypress", function(e2) {
          13 === (e2.keyCode || e2.which) && (a2.trigger("click"), i2._browse(e2));
        })), i2._handler(s2.find(".fileinput-remove:not([disabled])"), "click", e.proxy(i2.clear, i2)), i2._handler(s2.find(".fileinput-cancel"), "click", e.proxy(i2.cancel, i2)), i2._handler(s2.find(".fileinput-pause"), "click", e.proxy(i2.pause, i2)), i2._initDragDrop(), i2._handler(r2, "reset", e.proxy(i2.clear, i2)), i2.isAjaxUpload || i2._handler(r2, "submit", e.proxy(i2._submitForm, i2)), i2._handler(i2.$container.find(".fileinput-upload"), "click", e.proxy(i2._uploadClick, i2)), i2._handler(e(window), "resize", function() {
          i2._listenFullScreen(screen.width === window.innerWidth && screen.height === window.innerHeight);
        }), i2._handler(e(document), "webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange", function() {
          i2._listenFullScreen(t.checkFullScreen());
        }), i2.$caption.on("focus", function() {
          i2.$captionContainer.focus();
        }), i2._autoFitContent(), i2._initClickable(), i2._refreshPreview();
      }, _autoFitContent: function() {
        var t2, i2 = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, a2 = this, r2 = i2 < 400 ? a2.previewSettingsSmall || a2.defaults.previewSettingsSmall : a2.previewSettings || a2.defaults.previewSettings;
        e.each(r2, function(e2, i3) {
          t2 = ".file-preview-frame .file-preview-" + e2, a2.$preview.find(t2 + ".kv-preview-data," + t2 + " .kv-preview-data").css(i3);
        });
      }, _scanDroppedItems: function(e2, i2, a2) {
        a2 = a2 || "";
        var r2, s2, n, o = this, l = function(e3) {
          o._log(t.logMessages.badDroppedFiles), o._log(e3);
        };
        e2.isFile ? e2.file(function(e3) {
          a2 && (e3.newPath = a2 + e3.name), i2.push(e3);
        }, l) : e2.isDirectory && (s2 = e2.createReader(), (n = function() {
          s2.readEntries(function(t2) {
            if (t2 && t2.length > 0) {
              for (r2 = 0; r2 < t2.length; r2++) o._scanDroppedItems(t2[r2], i2, a2 + e2.name + "/");
              n();
            }
            return null;
          }, l);
        })());
      }, _initDragDrop: function() {
        var t2 = this.$dropZone;
        this.dropZoneEnabled && this.showPreview && (this._handler(t2, "dragenter dragover", e.proxy(this._zoneDragEnter, this)), this._handler(t2, "dragleave", e.proxy(this._zoneDragLeave, this)), this._handler(t2, "drop", e.proxy(this._zoneDrop, this)), this._handler(e(document), "dragenter dragover drop", this._zoneDragDropInit));
      }, _zoneDragDropInit: function(e2) {
        e2.stopPropagation(), e2.preventDefault();
      }, _zoneDragEnter: function(i2) {
        var a2 = i2.originalEvent.dataTransfer, r2 = e.inArray("Files", a2.types) > -1;
        if (this._zoneDragDropInit(i2), this.isDisabled || !r2) return a2.effectAllowed = "none", void (a2.dropEffect = "none");
        a2.dropEffect = "copy", this._raise("fileDragEnter", { sourceEvent: i2, files: a2.types.Files }) && t.addCss(this.$dropZone, "file-highlighted");
      }, _zoneDragLeave: function(e2) {
        this._zoneDragDropInit(e2), this.isDisabled || this._raise("fileDragLeave", { sourceEvent: e2 }) && this.$dropZone.removeClass("file-highlighted");
      }, _dropFiles: function(e2, t2) {
        var i2 = this, a2 = i2.$element;
        i2.isAjaxUpload ? i2._change(e2, t2) : (i2.changeTriggered = true, a2.get(0).files = t2, setTimeout(function() {
          i2.changeTriggered = false, a2.trigger("change" + i2.namespace);
        }, i2.processDelay)), i2.$dropZone.removeClass("file-highlighted");
      }, _addFilesFromSystem: function(e2, a2, r2) {
        var s2 = this, n = a2.files, o = a2.items, l = t.getDragDropFolders(o);
        if (e2.preventDefault(), s2.isDisabled || t.isEmpty(n) || !n.length) console.log("No valid copied files found in clipboard for pasting.");
        else if (s2._raise(r2, { sourceEvent: e2, files: n })) if (l > 0) {
          if (!s2.isAjaxUpload) return void s2._showFolderError(l);
          for (n = [], i = 0; i < o.length; i++) {
            var d = o[i].webkitGetAsEntry();
            d && s2._scanDroppedItems(d, n);
          }
          setTimeout(function() {
            s2._dropFiles(e2, n);
          }, 500);
        } else s2._dropFiles(e2, n);
      }, _zoneDrop: function(e2) {
        this.$element;
        var t2 = e2.originalEvent.dataTransfer;
        this._addFilesFromSystem(e2, t2, "fileDragDrop");
      }, _uploadClick: function(e2) {
        var i2, a2 = this.$container.find(".fileinput-upload"), r2 = !a2.hasClass("disabled") && t.isEmpty(a2.attr("disabled"));
        e2 && e2.isDefaultPrevented() || (this.isAjaxUpload ? (e2.preventDefault(), r2 && this.upload()) : r2 && "submit" !== a2.attr("type") && (e2.preventDefault(), (i2 = a2.closest("form")).length && i2.trigger("submit")));
      }, _submitForm: function() {
        return this._isFileSelectionValid() && !this._abort({});
      }, _clearPreview: function() {
        (this.showUploadedThumbs ? this.getFrames(":not(.file-preview-success)") : this.getFrames()).each(function() {
          e(this).remove();
        }), this.getFrames().length && this.showPreview || this._resetUpload(), this._validateDefaultPreview();
      }, _initSortable: function() {
        var i2, a2, r2, s2, n = this, o = n.$preview, l = "." + t.SORT_CSS, d = e("body"), c = e("html"), u = n.reversePreviewOrder, f = window.Sortable;
        f && 0 !== o.find(l).length && (a2 = d.length ? d : c.length ? c : n.$container, i2 = { handle: ".drag-handle-init", dataIdAttr: "data-fileid", animation: 600, draggable: l, scroll: false, forceFallback: true, onChoose: r2 = function() {
          a2.addClass("file-grabbing");
        }, onStart: r2, onUnchoose: s2 = function() {
          a2.removeClass("file-grabbing");
        }, onEnd: s2, onSort: function(i3) {
          var a3, r3 = i3.oldIndex, s3 = i3.newIndex, o2 = 0, l2 = n.initialPreviewConfig.length, d2 = l2 > 0 && s3 >= l2, c2 = e(i3.item);
          d2 && (s3 = l2 - 1), n.initialPreview = t.moveArray(n.initialPreview, r3, s3, u), n.initialPreviewConfig = t.moveArray(n.initialPreviewConfig, r3, s3, u), n.previewCache.init(), n.getFrames(".file-preview-initial").each(function() {
            e(this).attr("data-fileindex", t.INIT_FLAG + o2), o2++;
          }), d2 && (a3 = n.getFrames(":not(.file-preview-initial):first")).length && c2.slideUp(function() {
            c2.insertBefore(a3).slideDown();
          }), n._raise("filesorted", { previewId: c2.attr("id"), oldIndex: r3, newIndex: s3, stack: n.initialPreviewConfig });
        } }, e.extend(true, i2, n.fileActionSettings.dragSettings), n.sortable && n.sortable.destroy(), n.sortable = f.create(o[0], i2));
      }, _setPreviewContent: function(e2) {
        t.setHtml(this.$preview, e2), this._autoFitContent();
      }, _initPreviewImageOrientations: function() {
        var t2 = this, i2 = 0, a2 = t2.canOrientImage;
        (t2.autoOrientImageInitial || a2) && t2.getFrames(".file-preview-initial").each(function() {
          var r2, s2, n, o = e(this), l = t2.initialPreviewConfig[i2];
          l && l.exif && l.exif.Orientation && (n = o.attr("id"), r2 = o.find(">.kv-file-content img"), s2 = t2._getZoom(n, " >.kv-file-content img"), a2 ? r2.css("image-orientation", t2.autoOrientImageInitial ? "from-image" : "none") : t2.setImageOrientation(r2, s2, l.exif.Orientation, o)), i2++;
        });
      }, _initPreview: function(e2) {
        var i2, a2 = this.initialCaption || "";
        if (!this.previewCache.count(true)) return this._clearPreview(), void (e2 ? this._setCaption(a2) : this._initCaption());
        i2 = this.previewCache.out(), a2 = e2 && this.initialCaption ? this.initialCaption : i2.caption, this._setPreviewContent(i2.content), this._setInitThumbAttr(), this._setCaption(a2), this._initSortable(), t.isEmpty(i2.content) || this.$container.removeClass("file-input-new"), this._initPreviewImageOrientations();
      }, _getZoomButton: function(e2) {
        var i2 = this.previewZoomButtonIcons[e2], a2 = this.previewZoomButtonClasses[e2], r2 = ' title="' + (this.previewZoomButtonTitles[e2] || "") + '" ', s2 = t.isBs(5) ? "bs-" : "", n = r2 + ("close" === e2 ? " data-" + s2 + 'dismiss="modal" aria-hidden="true"' : "");
        return "fullscreen" !== e2 && "borderless" !== e2 && "toggleheader" !== e2 || (n += ' data-toggle="button" aria-pressed="false"'), '<button type="button" class="' + a2 + " btn-kv-" + e2 + '"' + n + ">" + i2 + "</button>";
      }, _getModalContent: function() {
        return this._getLayoutTemplate("modal").setTokens({ rtl: this.rtl ? " kv-rtl" : "", zoomFrameClass: this.frameClass, prev: this._getZoomButton("prev"), next: this._getZoomButton("next"), rotate: this._getZoomButton("rotate"), toggleheader: this._getZoomButton("toggleheader"), fullscreen: this._getZoomButton("fullscreen"), borderless: this._getZoomButton("borderless"), close: this._getZoomButton("close") });
      }, _listenModalEvent: function(e2) {
        var i2 = this, a2 = i2.$modal;
        a2.on(e2 + ".bs.modal", function(r2) {
          if ("bs.modal" === r2.namespace) {
            var s2 = a2.find(".btn-fullscreen"), n = a2.find(".btn-borderless");
            a2.data("fileinputPluginId") === i2.$element.attr("id") && i2._raise("filezoom" + e2, function(e3) {
              return { sourceEvent: e3, previewId: a2.data("previewId"), modal: a2 };
            }(r2)), "shown" === e2 && (i2._handleRotation(a2, a2.find(".file-zoom-detail"), a2.data("angle")), n.removeClass("active").attr("aria-pressed", "false"), s2.removeClass("active").attr("aria-pressed", "false"), a2.hasClass("file-zoom-fullscreen") && (i2._maximizeZoomDialog(), t.checkFullScreen() ? s2.addClass("active").attr("aria-pressed", "true") : n.addClass("active").attr("aria-pressed", "true")));
          }
        });
      }, _initZoom: function() {
        var i2, a2 = this, r2 = a2._getLayoutTemplate("modalMain"), s2 = "#" + t.MODAL_ID;
        r2 = a2._setTabIndex("modal", r2), a2.showPreview && (a2.$modal = e(s2), a2.$modal && a2.$modal.length || (i2 = t.createElement(t.cspBuffer.stash(r2)).insertAfter(a2.$container), a2.$modal = e(s2).insertBefore(i2), t.cspBuffer.apply(a2.$modal), i2.remove()), t.initModal(a2.$modal), a2.$modal.html(t.cspBuffer.stash(a2._getModalContent())), t.cspBuffer.apply(a2.$modal), e.each(t.MODAL_EVENTS, function(e2, t2) {
          a2._listenModalEvent(t2);
        }));
      }, _initZoomButtons: function() {
        var t2, i2, a2 = this.$modal, r2 = a2.data("previewId") || "", s2 = this.getFrames().toArray(), n = s2.length, o = a2.find(".btn-kv-prev"), l = a2.find(".btn-kv-next");
        a2.find(".btn-kv-rotate");
        if (s2.length < 2) return o.hide(), void l.hide();
        o.show(), l.show(), n && (t2 = e(s2[0]), i2 = e(s2[n - 1]), o.removeAttr("disabled"), l.removeAttr("disabled"), this.reversePreviewOrder && ([o, l] = [l, o]), t2.length && t2.attr("id") === r2 && o.attr("disabled", true), i2.length && i2.attr("id") === r2 && l.attr("disabled", true));
      }, _maximizeZoomDialog: function() {
        var t2 = this.$modal, i2 = t2.find(".modal-header:visible"), a2 = t2.find(".modal-footer:visible"), r2 = t2.find(".kv-zoom-body"), s2 = e(window).height();
        t2.addClass("file-zoom-fullscreen"), i2 && i2.length && (s2 -= i2.outerHeight(true)), a2 && a2.length && (s2 -= a2.outerHeight(true)), r2 && r2.length && (s2 -= r2.outerHeight(true) - r2.height()), t2.find(".kv-zoom-body").height(s2);
      }, _resizeZoomDialog: function(e2) {
        var i2 = this.$modal, a2 = i2.find(".btn-kv-fullscreen"), r2 = i2.find(".btn-kv-borderless");
        if (i2.hasClass("file-zoom-fullscreen")) t.toggleFullScreen(false), e2 ? a2.hasClass("active") || (i2.removeClass("file-zoom-fullscreen"), this._resizeZoomDialog(true), r2.hasClass("active") && r2.removeClass("active").attr("aria-pressed", "false")) : a2.hasClass("active") ? a2.removeClass("active").attr("aria-pressed", "false") : (i2.removeClass("file-zoom-fullscreen"), this.$modal.find(".kv-zoom-body").css("height", this.zoomModalHeight));
        else {
          if (!e2) return void this._maximizeZoomDialog();
          t.toggleFullScreen(true);
        }
        i2.focus();
      }, _setZoomContent: function(i2, a2) {
        var r2, s2, n, o, l, d, c, u, f, p, h, m, g = this, v = i2.attr("id"), w = g._getZoom(v), b = g.$modal, _ = b.find(".btn-kv-fullscreen"), C = b.find(".btn-kv-borderless"), x = b.find(".btn-kv-toggleheader"), y = i2.data("zoom");
        y && (y = decodeURIComponent(y), m = w.html().replace(g.zoomPlaceholder, "").setTokens({ zoomData: y }), t.setHtml(w, m), i2.data("zoom", ""), w.attr("data-zoom", y)), s2 = w.attr("data-template") || "generic", n = (r2 = w.find(".kv-file-content")).length ? r2.html() : "", p = i2.data("caption") || g.msgZoomModalHeading, h = i2.data("size") || "", u = i2.data("description") || "", t.setHtml(b.find(".kv-zoom-caption").attr("title", p), p), t.setHtml(b.find(".kv-zoom-size"), h), f = b.find(".kv-zoom-description").hide(), u && (g.showDescriptionClose && (u = g._getLayoutTemplate("descriptionClose").setTokens({ closeIcon: g.previewZoomButtonIcons.close }) + "</button>" + u), t.setHtml(f, u).show(), g.showDescriptionClose && g._handler(b.find(".kv-desc-hide"), "click", function() {
          e(this).parent().fadeOut("fast", function() {
            b.focus();
          });
        })), o = b.find(".kv-zoom-body"), b.removeClass("kv-single-content"), a2 ? (c = o.addClass("file-thumb-loading").clone().insertAfter(o), t.setHtml(o, n).hide(), c.fadeOut("fast", function() {
          o.fadeIn("fast", function() {
            o.removeClass("file-thumb-loading");
          }), c.remove();
        })) : t.setHtml(o, n), (d = g.previewZoomSettings[s2]) && (l = o.find(".kv-preview-data"), t.addCss(l, "file-zoom-detail"), e.each(d, function(e2, t2) {
          l.css(e2, t2), (l.attr("width") && "width" === e2 || l.attr("height") && "height" === e2) && l.removeAttr(e2);
        })), b.data("previewId", v), g._handler(b.find(".btn-kv-prev"), "click", function() {
          g._zoomSlideShow("prev", v);
        }), g._handler(b.find(".btn-kv-next"), "click", function() {
          g._zoomSlideShow("next", v);
        }), g._handler(_, "click", function() {
          g._resizeZoomDialog(true);
        }), g._handler(C, "click", function() {
          g._resizeZoomDialog(false);
        }), g._handler(x, "click", function() {
          var e2, t2 = b.find(".modal-header"), i3 = b.find(".floating-buttons"), a3 = t2.find(".kv-zoom-actions"), r3 = function(e3) {
            var i4 = g.$modal.find(".kv-zoom-body"), a4 = g.zoomModalHeight;
            b.hasClass("file-zoom-fullscreen") && (a4 = i4.outerHeight(true), e3 || (a4 -= t2.outerHeight(true))), i4.css("height", e3 ? a4 + e3 : a4);
          };
          t2.is(":visible") ? (e2 = t2.outerHeight(true), t2.slideUp("slow", function() {
            a3.find(".btn").appendTo(i3), r3(e2);
          })) : (i3.find(".btn").appendTo(a3), t2.slideDown("slow", function() {
            r3();
          })), b.focus();
        }), g._handler(b, "keydown", function(t2) {
          var i3, a3, r3 = t2.which || t2.keyCode, s3 = g.processDelay + 1, n2 = e(this).find(".btn-kv-prev"), o2 = e(this).find(".btn-kv-next"), l2 = e(this).data("previewId");
          [i3, a3] = g.rtl ? [39, 37] : [37, 39], e.each({ prev: [n2, i3], next: [o2, a3] }, function(e2, t3) {
            var i4 = t3[0], a4 = t3[1];
            r3 === a4 && i4.length && (b.focus(), i4.attr("disabled") || (i4.blur(), setTimeout(function() {
              i4.focus(), g._zoomSlideShow(e2, l2), setTimeout(function() {
                i4.attr("disabled") && b.focus();
              }, s3);
            }, s3)));
          });
        });
      }, _showModal: function(e2) {
        var i2, a2, r2 = this.$modal;
        e2 && e2.length && (t.initModal(r2), t.setHtml(r2, this._getModalContent()), this._setZoomContent(e2), r2.removeClass("rotatable"), r2.data({ backdrop: false, fileinputPluginId: this.$element.attr("id") }), r2.find(".kv-zoom-body").css("height", this.zoomModalHeight), (i2 = e2.find(".kv-file-content > :first-child")).length && (a2 = i2.css("transform")) && r2.find(".file-zoom-detail").css("transform", a2), e2.hasClass("rotatable") && r2.addClass("rotatable"), e2.data("angle") && r2.data("angle", e2.data("angle")), e2.data("angle") || 0, r2.modal("show"), this._initZoomButtons(), this._initRotateZoom(e2, i2));
      }, _zoomPreview: function(e2) {
        var i2;
        if (!e2.length) throw "Cannot zoom to detailed preview!";
        i2 = e2.closest(t.FRAMES), this._showModal(i2);
      }, _zoomSlideShow: function(t2, i2) {
        var a2, r2, s2, n, o, l, d = this.$modal, c = d.find(".kv-zoom-actions .btn-kv-" + t2), u = this.getFrames().toArray(), f = [], p = u.length;
        if (this.reversePreviewOrder && (t2 = "prev" === t2 ? "next" : "prev"), !c.attr("disabled")) {
          for (r2 = 0; r2 < p; r2++) (s2 = e(u[r2])) && s2.length && s2.find(".kv-file-zoom:visible").length && f.push(u[r2]);
          for (p = f.length, r2 = 0; r2 < p; r2++) if (e(f[r2]).attr("id") === i2) {
            n = "prev" === t2 ? r2 - 1 : r2 + 1;
            break;
          }
          n < 0 || n >= p || !f[n] || ((a2 = e(f[n])).length && this._setZoomContent(a2, t2), this._initZoomButtons(), a2.length && a2.hasClass("rotatable") ? (o = a2.data("angle") || 0, d.addClass("rotatable").data("angle", o), l = a2.find(".kv-file-content > :first-child"), this._initRotateZoom(a2, l)) : d.removeClass("rotatable").removeData("angle"), this._raise("filezoom" + t2, { previewId: i2, modal: this.$modal }));
        }
      }, _initZoomButton: function() {
        var t2 = this;
        t2.$preview.find(".kv-file-zoom").each(function() {
          var i2 = e(this);
          t2._handler(i2, "click", function() {
            t2._zoomPreview(i2);
          });
        });
      }, _inputFileCount: function() {
        return this.$element[0].files.length;
      }, _refreshPreview: function() {
        var t2;
        (this._inputFileCount() || this.isAjaxUpload) && this.showPreview && this.isPreviewable && (this.isAjaxUpload && this.fileManager.count() > 0 ? (t2 = e.extend(true, [], this.getFileList()), this.fileManager.clear(), this._clearFileInput()) : t2 = this.$element[0].files, t2 && t2.length && this.readFiles(t2));
      }, _clearObjects: function(t2) {
        t2.find("video audio").each(function() {
          this.pause(), e(this).remove();
        }), t2.find("img object div").each(function() {
          e(this).remove();
        });
      }, _clearFileInput: function() {
        var t2, i2, a2, r2 = this.$element;
        this._inputFileCount() && (t2 = r2.closest("form"), i2 = e(document.createElement("form")), a2 = e(document.createElement("div")), r2.before(a2), t2.length ? t2.after(i2) : a2.after(i2), i2.append(r2).trigger("reset"), a2.before(r2).remove(), i2.remove());
      }, _resetUpload: function() {
        this.uploadInitiated = false, this.uploadStartTime = t.now(), this.uploadCache = [], this.$btnUpload.removeAttr("disabled"), this._setProgress(0), this._hideProgress(), this._resetErrors(false), this._initAjax(), this.fileManager.clearImages(), this._resetCanvas(), this.overwriteInitial && (this.initialPreview = [], this.initialPreviewConfig = [], this.initialPreviewThumbTags = [], this.previewCache.data = { content: [], config: [], tags: [] });
      }, _resetCanvas: function() {
        this.imageCanvas && this.imageCanvasContext && this.imageCanvasContext.clearRect(0, 0, this.imageCanvas.width, this.imageCanvas.height);
      }, _hasInitialPreview: function() {
        return !this.overwriteInitial && this.previewCache.count(true);
      }, _resetPreview: function() {
        var i2, a2, r2, s2 = this.showUploadedThumbs, n = !this.removeFromPreviewOnError, o = (s2 || n) && this.isDuplicateError;
        this.previewCache.count(true) ? (i2 = this.previewCache.out(), o && (r2 = t.createDiv().insertAfter(this.$container), this.getFrames().each(function() {
          var t2 = e(this);
          (s2 && t2.hasClass("file-preview-success") || n && t2.hasClass("file-preview-error")) && r2.append(t2);
        })), this._setPreviewContent(i2.content), this._setInitThumbAttr(), a2 = this.initialCaption ? this.initialCaption : i2.caption, this._setCaption(a2), o && (r2.contents().appendTo(this.$preview), r2.remove())) : (this._clearPreview(), this._initCaption()), this.showPreview && (this._initZoom(), this._initSortable()), this.isDuplicateError = false;
      }, _clearDefaultPreview: function() {
        this.$preview.find(".file-default-preview").remove();
      }, _validateDefaultPreview: function() {
        this.showPreview && !t.isEmpty(this.defaultPreviewContent) && (this._setPreviewContent('<div class="file-default-preview">' + this.defaultPreviewContent + "</div>"), this.$container.removeClass("file-input-new"), this._initClickable());
      }, _resetPreviewThumbs: function(e2) {
        var t2;
        if (e2) return this._clearPreview(), void this.clearFileStack();
        this._hasInitialPreview() ? (t2 = this.previewCache.out(), this._setPreviewContent(t2.content), this._setInitThumbAttr(), this._setCaption(t2.caption), this._initPreviewActions()) : this._clearPreview();
      }, _getLayoutTemplate: function(e2) {
        var i2 = this.layoutTemplates[e2];
        return t.isEmpty(this.customLayoutTags) ? i2 : t.replaceTags(i2, this.customLayoutTags);
      }, _getPreviewTemplate: function(e2) {
        var i2 = this.previewTemplates, a2 = i2[e2] || i2.other;
        return t.isEmpty(this.customPreviewTags) ? a2 : t.replaceTags(a2, this.customPreviewTags);
      }, _getOutData: function(e2, t2, i2, a2) {
        return t2 = t2 || {}, i2 = i2 || {}, { formdata: e2, files: a2 = a2 || this.fileManager.list(), filenames: this.filenames, filescount: this.getFilesCount(), extra: this._getExtraData(), response: i2, reader: this.reader, jqXHR: t2 };
      }, _getMsgSelected: function(e2, t2) {
        var i2 = 1 === e2 ? this.fileSingle : this.filePlural;
        return e2 > 0 ? this.msgSelected.replace("{n}", e2).replace("{files}", i2) : t2 ? this.msgProcessing : this.msgNoFilesSelected;
      }, _getFrame: function(e2, i2) {
        var a2 = t.getFrameElement(this.$preview, e2);
        return !this.showPreview || i2 || a2.length || this._log(t.logMessages.invalidThumb, { id: e2 }), a2;
      }, _getZoom: function(e2, i2) {
        var a2 = t.getZoomElement(this.$preview, e2, i2);
        return this.showPreview && !a2.length && this._log(t.logMessages.invalidThumb, { id: e2 }), a2;
      }, _getThumbs: function(e2) {
        return e2 = e2 || "", this.getFrames(":not(.file-preview-initial)" + e2);
      }, _getThumbId: function(e2) {
        return this.previewInitId + "-" + e2;
      }, _getExtraData: function(e2, t2) {
        var i2 = this.uploadExtraData;
        return "function" == typeof this.uploadExtraData && (i2 = this.uploadExtraData(e2, t2)), i2;
      }, _initXhr: function(e2, i2) {
        var a2 = this, r2 = a2.fileManager, s2 = function(e3) {
          var s3 = 0, n = e3.total, o = e3.loaded || e3.position, l = r2.getUploadStats(i2, o, n);
          e3.lengthComputable && !a2.enableResumableUpload && (s3 = t.round(o / n * 100)), i2 ? a2._setFileUploadStats(i2, s3, l) : a2._setProgress(s3, null, null, a2._getStats(l)), a2._raise("fileajaxprogress", [l]);
        };
        return e2.upload && (a2.progressDelay && (s2 = t.debounce(s2, a2.progressDelay)), e2.upload.addEventListener("progress", s2, false)), e2;
      }, _initAjaxSettings: function() {
        this._ajaxSettings = e.extend(true, {}, this.ajaxSettings), this._ajaxDeleteSettings = e.extend(true, {}, this.ajaxDeleteSettings);
      }, _mergeAjaxCallback: function(e2, t2, i2) {
        var a2, r2 = this._ajaxSettings, s2 = this.mergeAjaxCallbacks;
        "delete" === i2 && (r2 = this._ajaxDeleteSettings, s2 = this.mergeAjaxDeleteCallbacks), a2 = r2[e2], r2[e2] = s2 && "function" == typeof a2 ? "before" === s2 ? function() {
          a2.apply(this, arguments), t2.apply(this, arguments);
        } : function() {
          t2.apply(this, arguments), a2.apply(this, arguments);
        } : t2;
      }, _ajaxSubmit: function(t2, i2, a2, r2, s2, n, o, l) {
        var d, c, u, f = this, p = f.taskManager;
        f._raise("filepreajax", [s2, n, o]) && (s2.append("initialPreview", JSON.stringify(f.initialPreview)), s2.append("initialPreviewConfig", JSON.stringify(f.initialPreviewConfig)), s2.append("initialPreviewThumbTags", JSON.stringify(f.initialPreviewThumbTags)), f._initAjaxSettings(), f._mergeAjaxCallback("beforeSend", t2), f._mergeAjaxCallback("success", i2), f._mergeAjaxCallback("complete", a2), f._mergeAjaxCallback("error", r2), "function" == typeof (l = l || f.uploadUrlThumb || f.uploadUrl) && (l = l()), "object" == typeof (u = f._getExtraData(n, o) || {}) && e.each(u, function(e2, t3) {
          s2.append(e2, t3);
        }), c = { xhr: function() {
          var t3 = e.ajaxSettings.xhr();
          return f._initXhr(t3, n);
        }, url: f._encodeURI(l), type: "POST", dataType: "json", data: s2, cache: false, processData: false, contentType: false }, d = e.extend(true, {}, c, f._ajaxSettings), f.ajaxQueue.push(d), p.addTask(n + "-" + o, function() {
          var t3, i3, a3 = this.self;
          t3 = a3.ajaxQueue.shift(), i3 = e.ajax(t3), a3.ajaxRequests.push(i3);
        }).runWithContext({ self: f }));
      }, _mergeArray: function(e2, i2) {
        var a2 = t.cleanArray(this[e2]), r2 = t.cleanArray(i2);
        this[e2] = a2.concat(r2);
      }, _initUploadSuccess: function(i2, a2, r2) {
        var s2, n, o, l, d, c, u, f, p, h = this;
        h.showPreview && "object" == typeof i2 && !e.isEmptyObject(i2) ? (void 0 !== i2.initialPreview && i2.initialPreview.length > 0 && (h.hasInitData = true, d = i2.initialPreview || [], c = i2.initialPreviewConfig || [], u = i2.initialPreviewThumbTags || [], s2 = void 0 === i2.append || i2.append, d.length > 0 && !t.isArray(d) && (d = d.split(h.initialPreviewDelimiter)), d.length && (h._mergeArray("initialPreview", d), h._mergeArray("initialPreviewConfig", c), h._mergeArray("initialPreviewThumbTags", u)), void 0 !== a2 ? r2 ? (f = a2.attr("id"), null !== (p = h._getUploadCacheIndex(f)) && (h.uploadCache[p] = { id: f, content: d[0], config: c[0] || [], tags: u[0] || [], append: s2 })) : (o = h.previewCache.add(d[0], c[0], u[0], s2), n = h.previewCache.get(o, false), l = t.createElement(t.cspBuffer.stash(n)).hide().appendTo(a2), t.cspBuffer.apply(a2), a2.fadeOut("slow", function() {
          var e2 = l.find("> .file-preview-frame");
          e2 && e2.length && e2.insertBefore(a2).fadeIn("slow").css("display:inline-block"), h._initPreviewActions(), h._clearFileInput(), a2.remove(), l.remove(), h._initSortable();
        })) : (h.previewCache.set(d, c, u, s2), h._initPreview(), h._initPreviewActions())), h._resetCaption()) : h._resetCaption();
      }, _getUploadCacheIndex: function(e2) {
        var t2, i2 = this.uploadCache.length;
        for (t2 = 0; t2 < i2; t2++) if (this.uploadCache[t2].id === e2) return t2;
        return null;
      }, _initSuccessThumbs: function() {
        var i2 = this;
        i2.showPreview && setTimeout(function() {
          i2._getThumbs(t.FRAMES + ".file-preview-success").each(function() {
            var a2 = e(this), r2 = a2.find(".kv-file-remove");
            r2.removeAttr("disabled"), i2._handler(r2, "click", function() {
              var e2 = a2.attr("id"), r3 = i2._raise("filesuccessremove", [e2, a2.attr("data-fileindex")]);
              t.cleanMemory(a2), false !== r3 && (i2.$caption.attr("title", ""), a2.fadeOut("slow", function() {
                i2.fileManager;
                a2.remove(), i2.getFrames().length || i2.reset();
              }));
            });
          });
        }, i2.processDelay);
      }, _updateInitialPreview: function() {
        var t2 = this, i2 = t2.uploadCache;
        t2.showPreview && (e.each(i2, function(e2, i3) {
          t2.previewCache.add(i3.content, i3.config, i3.tags, i3.append);
        }), t2.hasInitData && (t2._initPreview(), t2._initPreviewActions()));
      }, _getThumbFileId: function(e2) {
        return this.showPreview && void 0 !== e2 ? e2.attr("data-fileid") : null;
      }, _getThumbFile: function(e2) {
        var t2 = this._getThumbFileId(e2);
        return t2 ? this.fileManager.getFile(t2) : null;
      }, _uploadSingle: function(i2, a2, r2, s2) {
        var n, o, l, d, c, u, f, p, h, m, g, v, w, b = this, _ = b.fileManager, C = _.count(), x = new FormData(), y = b._getThumbId(a2), T = C > 0 || !e.isEmptyObject(b.uploadExtraData), P = b.ajaxOperations.uploadThumb, F = _.getFile(a2), k = { id: y, index: i2, fileId: a2 }, S = b.fileManager.getFileName(a2, true), I = function() {
          s2 && s2.resolve && s2.resolve();
        };
        b.enableResumableUpload || (b.uploadInitiated = true, b.showPreview && (o = _.getThumb(a2), f = o.find(".file-thumb-progress"), d = o.find(".kv-file-upload"), c = o.find(".kv-file-remove"), f.show()), 0 === C || !T || b.showPreview && d && d.hasClass("disabled") || b._abort(k) || (w = function() {
          u ? _.errors.push(a2) : _.removeFile(a2), _.setProcessed(a2), _.isProcessed() && (b.fileBatchCompleted = true, l());
        }, l = function() {
          var e2;
          b.fileBatchCompleted && setTimeout(function() {
            var i3 = 0 === _.count(), a3 = _.errors.length;
            b._updateInitialPreview(), b.unlock(i3), i3 && b._clearFileInput(), e2 = b.$preview.find(".file-preview-initial"), b.uploadAsync && e2.length && (t.addCss(e2, t.SORT_CSS), b._initSortable()), b._raise("filebatchuploadcomplete", [_.stack, b._getExtraData()]), b.retryErrorUploads && 0 !== a3 || _.clear(), b._setProgress(101), b.ajaxAborted = false, b.uploadInitiated = false;
          }, b.processDelay);
        }, p = function(s3) {
          n = b._getOutData(x, s3), _.initStats(a2), b.fileBatchCompleted = false, r2 || (b.ajaxAborted = false), b.showPreview && (o.hasClass("file-preview-success") || (b._setThumbStatus(o, "Loading"), t.addCss(o, "file-uploading")), d.attr("disabled", true), c.attr("disabled", true)), r2 || b.lock(), -1 !== _.errors.indexOf(a2) && delete _.errors[a2], b._raise("filepreupload", [n, y, i2, b._getThumbFileId(o)]), e.extend(true, k, n), b._abort(k) && (s3.abort(), r2 || (b._setThumbStatus(o, "New"), o.removeClass("file-uploading"), d.removeAttr("disabled"), c.removeAttr("disabled")), b._setProgressCancelled());
        }, m = function(s3, l2, c2) {
          var p2 = b.showPreview && o.attr("id") ? o.attr("id") : y;
          n = b._getOutData(x, c2, s3), e.extend(true, k, n), setTimeout(function() {
            t.isEmpty(s3) || t.isEmpty(s3.error) ? (b.showPreview && (b._setThumbStatus(o, "Success"), d.hide(), b._initUploadSuccess(s3, o, r2), b._setProgress(101, f)), b._raise("fileuploaded", [n, p2, i2, b._getThumbFileId(o)]), r2 ? (w(), I()) : b.fileManager.remove(o)) : (u = true, h = b._parseError(P, c2, b.msgUploadError, b.fileManager.getFileName(a2)), b._showFileError(h, k), b._setPreviewError(o, true), b.retryErrorUploads || d.hide(), r2 && (w(), I()), b._setProgress(101, b._getFrame(p2).find(".file-thumb-progress"), b.msgUploadError));
          }, b.processDelay);
        }, g = function() {
          b.showPreview && (d.removeAttr("disabled"), c.removeAttr("disabled"), o.removeClass("file-uploading")), r2 ? l() : (b.unlock(false), b._clearFileInput()), b._initSuccessThumbs();
        }, v = function(t2, i3, n2) {
          h = b._parseError(P, t2, n2, b.fileManager.getFileName(a2)), u = true, setTimeout(function() {
            var i4;
            r2 && (w(), s2 && s2.reject && s2.reject()), b.fileManager.setProgress(a2, 100), b._setPreviewError(o, true), b.retryErrorUploads || d.hide(), e.extend(true, k, b._getOutData(x, t2)), b._setProgress(101, b.$progress, b.msgAjaxProgressError.replace("{operation}", P)), i4 = b.showPreview && o ? o.find(".file-thumb-progress") : "", b._setProgress(101, i4, b.msgUploadError), b._showFileError(h, k);
          }, b.processDelay);
        }, b._setFileData(x, F.file, S, a2), b._setUploadData(x, { fileId: a2 }), b._ajaxSubmit(p, m, g, v, x, a2, i2)));
      }, _setFileData: function(e2, t2, i2, a2) {
        var r2 = this.preProcessUpload;
        r2 && "function" == typeof r2 ? e2.append(this.uploadFileAttr, r2(a2, t2)) : e2.append(this.uploadFileAttr, t2, i2);
      }, _checkBatchPreupload: function(t2, i2) {
        var a2 = this;
        return !!a2._raise("filebatchpreupload", [t2]) || (a2._abort(t2), i2 && i2.abort(), a2._getThumbs().each(function() {
          var t3 = e(this), i3 = t3.find(".kv-file-upload"), r2 = t3.find(".kv-file-remove");
          t3.hasClass("file-preview-loading") && (a2._setThumbStatus(t3, "New"), t3.removeClass("file-uploading")), i3.removeAttr("disabled"), r2.removeAttr("disabled");
        }), a2._setProgressCancelled(), false);
      }, _uploadBatch: function() {
        var i2, a2, r2, s2, n, o, l = this, d = l.fileManager, c = d.total(), u = c > 0 || !e.isEmptyObject(l.uploadExtraData), f = new FormData(), p = l.ajaxOperations.uploadBatch;
        if (0 !== c && u && !l._abort({})) {
          o = function() {
            l.fileManager.clear(), l._clearFileInput();
          }, i2 = function(i3) {
            l.lock(), d.initStats();
            var a3 = l._getOutData(f, i3);
            l.ajaxAborted = false, l.showPreview && l._getThumbs().each(function() {
              var i4 = e(this), a4 = i4.find(".kv-file-upload"), r3 = i4.find(".kv-file-remove");
              i4.hasClass("file-preview-success") || (l._setThumbStatus(i4, "Loading"), t.addCss(i4, "file-uploading")), a4.attr("disabled", true), r3.attr("disabled", true);
            }), l._checkBatchPreupload(a3, i3);
          }, a2 = function(i3, a3, r3) {
            var s3 = l._getOutData(f, r3, i3), d2 = 0, c2 = l._getThumbs(":not(.file-preview-success)"), u2 = t.isEmpty(i3) || t.isEmpty(i3.errorkeys) ? [] : i3.errorkeys;
            t.isEmpty(i3) || t.isEmpty(i3.error) ? (l._raise("filebatchuploadsuccess", [s3]), o(), l.showPreview ? (c2.each(function() {
              var t2 = e(this);
              l._setThumbStatus(t2, "Success"), t2.removeClass("file-uploading"), t2.find(".kv-file-upload").hide().removeAttr("disabled");
            }), l._initUploadSuccess(i3)) : l.reset(), l._setProgress(101)) : (l.showPreview && (c2.each(function() {
              var t2 = e(this);
              t2.removeClass("file-uploading"), t2.find(".kv-file-upload").removeAttr("disabled"), t2.find(".kv-file-remove").removeAttr("disabled"), 0 === u2.length || -1 !== e.inArray(d2, u2) ? (l._setPreviewError(t2, true), l.retryErrorUploads || (t2.find(".kv-file-upload").hide(), l.fileManager.remove(t2))) : (t2.find(".kv-file-upload").hide(), l._setThumbStatus(t2, "Success"), l.fileManager.remove(t2)), t2.hasClass("file-preview-error") && !l.retryErrorUploads || d2++;
            }), l._initUploadSuccess(i3)), n = l._parseError(p, r3, l.msgUploadError), l._showFileError(n, s3, "filebatchuploaderror"), l._setProgress(101, l.$progress, l.msgUploadError));
          }, s2 = function() {
            l.unlock(), l._initSuccessThumbs(), l._clearFileInput(), l._raise("filebatchuploadcomplete", [l.fileManager.stack, l._getExtraData()]);
          }, r2 = function(t2, i3, a3) {
            var r3 = l._getOutData(f, t2);
            n = l._parseError(p, t2, a3), l._showFileError(n, r3, "filebatchuploaderror"), l.uploadFileCount = c - 1, l.showPreview && (l._getThumbs().each(function() {
              var t3 = e(this);
              t3.removeClass("file-uploading"), l._getThumbFile(t3) && l._setPreviewError(t3);
            }), l._getThumbs().removeClass("file-uploading"), l._getThumbs(" .kv-file-upload").removeAttr("disabled"), l._getThumbs(" .kv-file-delete").removeAttr("disabled"), l._setProgress(101, l.$progress, l.msgAjaxProgressError.replace("{operation}", p)));
          };
          var h = 0;
          e.each(l.fileManager.stack, function(e2, i3) {
            t.isEmpty(i3.file) || l._setFileData(f, i3.file, i3.nameFmt || "untitled_" + h, e2), h++;
          }), l._ajaxSubmit(i2, a2, s2, r2, f);
        }
      }, _uploadExtraOnly: function() {
        var e2, i2, a2, r2, s2, n = this, o = {}, l = new FormData(), d = n.ajaxOperations.uploadExtra;
        e2 = function(e3) {
          n.lock();
          var t2 = n._getOutData(l, e3);
          n._setProgress(50), o.data = t2, o.xhr = e3, n._checkBatchPreupload(t2, e3);
        }, i2 = function(e3, i3, a3) {
          var r3 = n._getOutData(l, a3, e3);
          t.isEmpty(e3) || t.isEmpty(e3.error) ? (n._raise("filebatchuploadsuccess", [r3]), n._clearFileInput(), n._initUploadSuccess(e3), n._setProgress(101)) : (s2 = n._parseError(d, a3, n.msgUploadError), n._showFileError(s2, r3, "filebatchuploaderror"));
        }, a2 = function() {
          n.unlock(), n._clearFileInput(), n._raise("filebatchuploadcomplete", [n.fileManager.stack, n._getExtraData()]);
        }, r2 = function(e3, t2, i3) {
          var a3 = n._getOutData(l, e3);
          s2 = n._parseError(d, e3, i3), o.data = a3, n._showFileError(s2, a3, "filebatchuploaderror"), n._setProgress(101, n.$progress, n.msgAjaxProgressError.replace("{operation}", d));
        }, n._ajaxSubmit(e2, i2, a2, r2, l);
      }, _deleteFileIndex: function(i2) {
        var a2 = i2.attr("data-fileindex"), r2 = this.reversePreviewOrder;
        a2.substring(0, 5) === t.INIT_FLAG && (a2 = parseInt(a2.replace(t.INIT_FLAG, "")), this.initialPreview = t.spliceArray(this.initialPreview, a2, r2), this.initialPreviewConfig = t.spliceArray(this.initialPreviewConfig, a2, r2), this.initialPreviewThumbTags = t.spliceArray(this.initialPreviewThumbTags, a2, r2), this.getFrames().each(function() {
          var i3 = e(this), r3 = i3.attr("data-fileindex");
          r3.substring(0, 5) === t.INIT_FLAG && (r3 = parseInt(r3.replace(t.INIT_FLAG, ""))) > a2 && (r3--, i3.attr("data-fileindex", t.INIT_FLAG + r3));
        }));
      }, _resetCaption: function() {
        var e2 = this;
        setTimeout(function() {
          var t2, i2, a2, r2 = "", s2 = e2.previewCache.count(true), n = e2.fileManager.count(), o = e2.showPreview && e2.getFrames(":not(.file-preview-success):not(.file-preview-error)").length;
          0 !== n || 0 !== s2 || o ? ((t2 = s2 + n) > 1 ? r2 = e2._getMsgSelected(t2) : 0 === n ? (r2 = "", (a2 = e2.initialPreviewConfig[0]) && (r2 = a2.caption || a2.filename || ""), r2 || (r2 = e2._getMsgSelected(t2))) : r2 = (i2 = e2.fileManager.getFirstFile()) ? i2.nameFmt : "_", e2._setCaption(r2)) : e2.reset();
        }, e2.processDelay);
      }, _handleRotation: function(t2, i2, a2) {
        var r2, s2, n, o, l, d, c, u, f, p = "", h = 1, m = i2[0], g = i2.parent(), v = e("body"), w = !!v.length;
        w && v.addClass("kv-overflow-hidden"), i2.length && !t2.hasClass("hide-rotate") ? ((o = i2.css("transform")) && i2.css("transform", "none"), o && i2.css("transform", o), r2 = "rotate(" + (a2 = a2 || 0) + "deg)", s2 = "rotate(" + (n = a2 % 360) + "deg)", p = "", 90 !== n && 270 !== n || (h = (d = m.naturalWidth || i2.outerWidth() || 0) > (l = m.naturalHeight || i2.outerHeight() || 0) && 0 != d ? (l / d).toFixed(2) : 1, g.length && (u = g.height(), f = g.width(), u > h * (c = Math.min(d, f)) && (h = c > u && 0 != c ? (u / c).toFixed(2) : 1)), 1 !== h && (p = " scale(" + h + ")")), i2.addClass("rotate-animate").css("transform", r2 + p), setTimeout(function() {
          i2.removeClass("rotate-animate").css("transform", s2 + p), w && v.removeClass("kv-overflow-hidden"), t2.data("angle", n);
        }, this.fadeDelay)) : w && v.removeClass("kv-overflow-hidden");
      }, _initRotateButton: function() {
        var i2 = this;
        i2.getFrames(".rotatable .kv-file-rotate").each(function() {
          var a2 = e(this), r2 = a2.closest(t.FRAMES), s2 = r2.find(".kv-file-content > :first-child");
          i2._handler(a2, "click", function() {
            var e2 = (r2.data("angle") || 0) + 90;
            i2._handleRotation(r2, s2, e2);
          });
        });
      }, _initRotateZoom: function(e2, t2) {
        var i2 = this, a2 = i2.$modal, r2 = a2.find(".btn-kv-rotate"), s2 = e2.data("angle");
        a2.data("angle", s2), r2.length && (r2.off("click"), a2.hasClass("rotatable") && r2.on("click", function() {
          s2 = (a2.data("angle") || 0) + 90, a2.data("angle", s2), i2._handleRotation(a2, a2.find(".file-zoom-detail"), s2), i2._handleRotation(e2, t2, s2), e2.hasClass("hide-rotate") && e2.data("angle", s2);
        }));
      }, _initFileActions: function() {
        var i2 = this;
        i2.showPreview && (i2._initZoomButton(), i2._initRotateButton(), i2.getFrames(" .kv-file-remove").each(function() {
          var a2, r2 = e(this), s2 = r2.closest(t.FRAMES), n = s2.attr("id"), o = s2.attr("data-fileindex");
          i2.fileManager;
          i2._handler(r2, "click", function() {
            if (false === i2._raise("filepreremove", [n, o]) || !i2._validateMinCount()) return false;
            a2 = s2.hasClass("file-preview-error"), t.cleanMemory(s2), s2.fadeOut("slow", function() {
              i2.fileManager.remove(s2), i2._clearObjects(s2), s2.remove(), n && a2 && i2.$errorContainer.find('li[data-thumb-id="' + n + '"]').fadeOut("fast", function() {
                e(this).remove(), i2._errorsExist() || i2._resetErrors();
              }), i2._clearFileInput(), i2._resetCaption(), i2._raise("fileremoved", [n, o]);
            });
          });
        }), i2.getFrames(" .kv-file-upload").each(function() {
          var a2 = e(this);
          i2._handler(a2, "click", function() {
            var e2 = a2.closest(t.FRAMES), r2 = i2._getThumbFileId(e2);
            i2._hideProgress(), e2.hasClass("file-preview-error") && !i2.retryErrorUploads || i2._uploadSingle(i2.fileManager.getIndex(r2), r2, false);
          });
        }));
      }, _initPreviewActions: function() {
        var i2 = this, a2 = i2.$preview, r2 = i2.deleteExtraData || {}, s2 = t.FRAMES + " .kv-file-remove", n = i2.fileActionSettings, o = n.removeClass, l = n.removeErrorClass, d = function() {
          var e2 = i2.isAjaxUpload ? i2.previewCache.count(true) : i2._inputFileCount();
          i2.getFrames().length || e2 ? i2._resetCaption() : (i2._setCaption(""), i2.reset(), i2.initialCaption = "");
        };
        i2._initZoomButton(), i2._initRotateButton(), a2.find(s2).each(function() {
          var a3, s3, n2, c, u = e(this), f = u.data("url") || i2.deleteUrl, p = u.data("key"), h = i2.ajaxOperations.deleteThumb;
          if (!t.isEmpty(f) && void 0 !== p) {
            "function" == typeof f && (f = f());
            var m, g, v, w, b, _ = u.closest(t.FRAMES), C = i2.previewCache.data, x = _.attr("data-fileindex");
            x = parseInt(x.replace(t.INIT_FLAG, "")), v = t.isEmpty(C.config) && t.isEmpty(C.config[x]) ? null : C.config[x], b = t.isEmpty(v) || t.isEmpty(v.extra) ? r2 : v.extra, w = v && (v.filename || v.caption) || "", "function" == typeof b && (b = b()), g = { id: u.attr("id"), key: p, extra: b }, s3 = function(e2) {
              i2.ajaxAborted = false, i2._raise("filepredelete", [p, e2, b]), i2._abort() ? e2.abort() : (u.removeClass(l), t.addCss(_, "file-uploading"), t.addCss(u, "disabled " + o));
            }, n2 = function(e2, r3, s4) {
              var n3, c2;
              if (!t.isEmpty(e2) && !t.isEmpty(e2.error)) return g.jqXHR = s4, g.response = e2, a3 = i2._parseError(h, s4, i2.msgDeleteError, w), i2._showFileError(a3, g, "filedeleteerror"), _.removeClass("file-uploading"), u.removeClass("disabled " + o).addClass(l), void d();
              _.removeClass("file-uploading").addClass("file-deleted"), _.fadeOut("slow", function() {
                x = parseInt(_.attr("data-fileindex").replace(t.INIT_FLAG, "")), i2.previewCache.unset(x), i2._deleteFileIndex(_), n3 = i2.previewCache.count(true), c2 = n3 > 0 ? i2._getMsgSelected(n3) : "", i2._setCaption(c2), i2._raise("filedeleted", [p, s4, b]), i2._clearObjects(_), _.remove(), d();
              });
            }, c = function(e2, t2, a4) {
              var r3 = i2._parseError(h, e2, a4, w);
              g.jqXHR = e2, g.response = {}, i2._showFileError(r3, g, "filedeleteerror"), _.removeClass("file-uploading"), u.removeClass("disabled " + o).addClass(l), d();
            }, i2._initAjaxSettings(), i2._mergeAjaxCallback("beforeSend", s3, "delete"), i2._mergeAjaxCallback("success", n2, "delete"), i2._mergeAjaxCallback("error", c, "delete"), m = e.extend(true, {}, { url: i2._encodeURI(f), type: "POST", dataType: "json", data: e.extend(true, {}, { key: p }, b) }, i2._ajaxDeleteSettings), i2._handler(u, "click", function() {
              if (!i2._validateMinCount()) return false;
              i2.ajaxAborted = false, i2._raise("filebeforedelete", [p, b]), i2.ajaxAborted instanceof Promise ? i2.ajaxAborted.then(function(t2) {
                t2 || e.ajax(m);
              }) : i2.ajaxAborted || e.ajax(m);
            });
          }
        });
      }, _hideFileIcon: function() {
        this.overwriteInitial && this.$captionContainer.removeClass("icon-visible");
      }, _showFileIcon: function() {
        t.addCss(this.$captionContainer, "icon-visible");
      }, _getSize: function(e2, i2, a2) {
        var r2, s2, n = parseFloat(e2), o = 0, l = this.bytesToKB, d = this.fileSizeGetter, c = n;
        if (!t.isNumeric(e2) || !t.isNumeric(n)) return "";
        if ("function" == typeof d) r2 = d(n);
        else {
          if (a2 || (a2 = this.sizeUnits), n > 0) {
            for (; c >= l; ) c /= l, ++o;
            a2[o] || (c = n, o = 0);
          }
          (s2 = c.toFixed(2)) == c && (s2 = c), r2 = s2 + " " + a2[o];
        }
        return i2 ? r2 : this._getLayoutTemplate("size").replace("{sizeText}", r2);
      }, _getFileType: function(e2) {
        return this.mimeTypeAliases[e2] || e2;
      }, _generatePreviewTemplate: function(i2, a2, r2, s2, n, o, l, d, c, u, f, p, h, m, g) {
        var v, w, b, _, C = this, x = C.slug(r2), y = "", T = "", P = c || r2, F = P.split(".").pop().toLowerCase(), k = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, S = x, I = x, E = "type-default", A = f || C._renderFileFooter(i2, x, d, "auto", l), z = -1 !== e.inArray(F, C.alwaysPreviewFileExtensions), D = C.preferIconicPreview && !z, j = C.preferIconicZoomPreview && !z, U = D ? "other" : i2;
        return (v = k < 400 ? C.previewSettingsSmall[U] || C.defaults.previewSettingsSmall[U] : C.previewSettings[U] || C.defaults.previewSettings[U]) && e.each(v, function(e2, t2) {
          T += e2 + ":" + t2 + ";";
        }), w = function(a3, l2, d2, c2, f2) {
          var g2, v2 = d2 ? "zoom-" + n : n, w2 = C._getPreviewTemplate(a3), b2 = (u || "") + " " + c2;
          return C.frameClass && (b2 = C.frameClass + " " + b2), d2 && (b2 = b2.replace(" " + t.SORT_CSS, "")), w2 = C._parseFilePreviewIcon(w2, r2), "object" !== i2 || s2 || e.each(C.defaults.fileTypeSettings, function(e2, t2) {
            "object" !== e2 && "other" !== e2 && t2(r2, s2) && (E = "type-" + e2);
          }), t.isEmpty(m) || (void 0 !== m.title && null !== m.title && (S = m.title), void 0 !== m.alt && null !== m.alt && (I = S = m.alt)), g2 = { previewId: v2, caption: x, title: S, alt: I, frameClass: b2, type: C._getFileType(s2), fileindex: p, fileid: o || "", filename: P, typeCss: E, footer: A, data: d2 && f2 ? C.zoomPlaceholder + "{zoomData}" : l2, template: h || i2, style: T ? 'style="' + T + '"' : "", zoomData: f2 ? encodeURIComponent(f2) : "" }, d2 && (g2.zoomCache = "", g2.zoomData = "{zoomData}"), w2.setTokens(g2);
        }, p = p || n.slice(n.lastIndexOf("-") + 1), _ = C.fileActionSettings.showRotate && -1 !== e.inArray(F, C.rotatableFileExtensions), C.fileActionSettings.showZoom && (b = "kv-zoom-thumb", _ && (b += " rotatable" + (j ? " hide-rotate" : "")), y = w(j ? "other" : i2, a2, true, b, g)), y = "\n" + C._getLayoutTemplate("zoomCache").replace("{zoomContent}", y), "function" == typeof C.sanitizeZoomCache && (y = C.sanitizeZoomCache(y)), b = "kv-preview-thumb", _ && (b += " rotatable" + (D || C.hideThumbnailContent || !!C.previewFileIconSettings[F] ? " hide-rotate" : "")), w(D ? "other" : i2, a2, false, b, g).setTokens({ zoomCache: y });
      }, _addToPreview: function(e2, i2) {
        var a2;
        return i2 = t.cspBuffer.stash(i2), a2 = this.reversePreviewOrder ? e2.prepend(i2) : e2.append(i2), t.cspBuffer.apply(e2), a2;
      }, _previewDefault: function(e2, i2) {
        var a2 = this.$preview;
        if (this.showPreview) {
          var r2, s2 = t.getFileName(e2), n = e2 ? e2.type : "", o = e2.size || 0, l = this._getFileName(e2, ""), d = true === i2 && !this.isAjaxUpload, c = t.createObjectURL(e2), u = this.fileManager.getId(e2), f = this._getThumbId(u);
          this._clearDefaultPreview(), r2 = this._generatePreviewTemplate("other", c, s2, n, f, u, d, o), this._addToPreview(a2, r2), this._setThumbAttr(f, l, o), true === i2 && this.isAjaxUpload && this._setThumbStatus(this._getFrame(f), "Error");
        }
      }, _previewFile: function(e2, i2, a2, r2, s2) {
        if (this.showPreview) {
          var n, o = t.getFileName(i2), l = s2.type, d = s2.name, c = this._parseFileType(l, o), u = this.$preview, f = i2.size || 0, p = "image" === c ? a2.target.result : r2, h = this.fileManager.getId(i2), m = this._getThumbId(h);
          n = this._generatePreviewTemplate(c, p, o, l, m, h, false, f, s2.filename), this._clearDefaultPreview(), this._addToPreview(u, n);
          var g = this._getFrame(m);
          this._validateImageOrientation(g.find("img"), i2, m, h, d, l, f, p), this._setThumbAttr(m, d, f), this._initSortable();
        }
      }, _setThumbAttr: function(e2, t2, i2, a2) {
        var r2 = this._getFrame(e2);
        r2.length && (i2 = i2 && i2 > 0 ? this._getSize(i2) : "", r2.data({ caption: t2, size: i2, description: a2 || "" }));
      }, _setInitThumbAttr: function() {
        var e2, i2, a2, r2, s2, n = this.previewCache.data, o = this.previewCache.count(true);
        if (0 !== o) for (var l = 0; l < o; l++) e2 = n.config[l], s2 = this.previewInitId + "-" + t.INIT_FLAG + l, i2 = t.ifSet("caption", e2, t.ifSet("filename", e2)), a2 = t.ifSet("size", e2), r2 = t.ifSet("description", e2), this._setThumbAttr(s2, i2, a2, r2);
      }, _slugDefault: function(e2) {
        return t.isEmpty(e2, true) ? "" : String(e2).replace(/[\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g, "_");
      }, _updateFileDetails: function(e2) {
        var i2, a2, r2, s2, n = this.$element, o = t.isIE(9) && t.findFileName(n.val()) || n[0].files[0] && n[0].files[0].name;
        i2 = !o && this.fileManager.count() > 0 ? this.fileManager.getFirstFile().nameFmt : o ? this.slug(o) : "_", a2 = this.isAjaxUpload ? this.fileManager.count() : e2, s2 = this.previewCache.count(true) + a2, r2 = 1 === a2 ? i2 : this._getMsgSelected(s2, !this.isAjaxUpload && !this.isError), this.isError ? (this.$previewContainer.removeClass("file-thumb-loading"), this._initCapStatus(), this.$previewStatus.html(""), this.$captionContainer.removeClass("icon-visible")) : this._showFileIcon(), this._setCaption(r2, this.isError), this.$container.removeClass("file-input-new file-input-ajax-new"), this._raise("fileselect", [e2, i2]), this.previewCache.count(true) && this._initPreviewActions();
      }, _setThumbStatus: function(e2, i2) {
        if (this.showPreview) {
          var a2 = "indicator" + i2, r2 = a2 + "Title", s2 = "file-preview-" + i2.toLowerCase(), n = e2.find(".file-upload-indicator"), o = this.fileActionSettings;
          e2.removeClass("file-preview-success file-preview-error file-preview-paused file-preview-loading"), "Success" === i2 && e2.find(".file-drag-handle").remove(), t.setHtml(n, o[a2]), n.attr("title", o[r2]), e2.addClass(s2), "Error" !== i2 || this.retryErrorUploads || e2.find(".kv-file-upload").attr("disabled", true);
        }
      }, _setProgressCancelled: function() {
        this._setProgress(101, this.$progress, this.msgCancelled);
      }, _setProgress: function(e2, i2, a2, r2) {
        if ((i2 = i2 || this.$progress).length) {
          var s2, n = Math.min(e2, 100), o = this.progressUploadThreshold, l = e2 <= 100 ? this.progressTemplate : this.progressCompleteTemplate, d = n < 100 ? this.progressTemplate : a2 ? this.paused ? this.progressPauseTemplate : this.progressErrorTemplate : l;
          e2 >= 100 && (r2 = ""), t.isEmpty(d) || (r2 = r2 || "", s2 = (s2 = o && n > o && e2 <= 100 ? d.setTokens({ percent: o, status: this.msgUploadThreshold }) : d.setTokens({ percent: n, status: e2 > 100 ? this.msgUploadEnd : n + "%" })).setTokens({ stats: r2 }), t.setHtml(i2, s2), a2 && t.setHtml(i2.find('[role="progressbar"]'), a2));
        }
      }, _hasFiles: function() {
        var e2 = this.$element[0];
        return !!(e2 && e2.files && e2.files.length);
      }, _setFileDropZoneTitle: function() {
        var e2, i2 = this.$container.find(".file-drop-zone"), a2 = this.dropZoneTitle;
        this.isClickable && (e2 = t.isEmpty(this.$element.attr("multiple")) ? this.fileSingle : this.filePlural, a2 += this.dropZoneClickTitle.replace("{files}", e2)), i2.find("." + this.dropZoneTitleClass).remove(), !this.showPreview || 0 === i2.length || this.fileManager.count() > 0 || !this.dropZoneEnabled || this.previewCache.count() > 0 || !this.isAjaxUpload && this._hasFiles() || (0 === i2.find(t.FRAMES).length && t.isEmpty(this.defaultPreviewContent) && (i2.prepend(t.cspBuffer.stash('<div class="' + this.dropZoneTitleClass + '">' + a2 + "</div>")), t.cspBuffer.apply(i2)), this.$container.removeClass("file-input-new"), this.isAjaxUpload && t.addCss(this.$container, "file-input-ajax-new"));
      }, _getStats: function(e2) {
        var i2, a2;
        return this.showUploadStats && e2 && e2.bitrate ? (a2 = this._getLayoutTemplate("stats"), i2 = e2.elapsed && e2.bps ? this.msgPendingTime.setTokens({ time: t.getElapsed(Math.ceil(e2.pendingBytes / e2.bps)) }) : this.msgCalculatingTime, a2.setTokens({ uploadSpeed: e2.bitrate, pendingTime: i2 })) : "";
      }, _setResumableProgress: function(e2, t2, i2) {
        var a2 = this.resumableManager, r2 = i2 ? a2 : this, s2 = i2 ? i2.find(".file-thumb-progress") : null;
        0 === r2.lastProgress && (r2.lastProgress = e2), e2 < r2.lastProgress && (e2 = r2.lastProgress), this._setProgress(e2, s2, null, this._getStats(t2)), r2.lastProgress = e2;
      }, _toggleResumableProgress: function(e2, i2) {
        var a2 = this.$progress;
        a2 && a2.length && t.setHtml(a2, e2.setTokens({ percent: 101, status: i2, stats: "" }));
      }, _setFileUploadStats: function(i2, a2, r2) {
        var s2 = this.$progress;
        if (this.showPreview || s2 && s2.length) {
          var n, o = this.fileManager, l = this.resumableManager, d = o.getThumb(i2), c = 0, u = o.getTotalSize(), f = e.extend(true, {}, r2);
          if (this.enableResumableUpload) {
            var p, h = r2.loaded, m = l.getUploadedSize(), g = l.file.size;
            h += m, p = o.uploadedSize + h, a2 = t.round(100 * h / g), r2.pendingBytes = g - m, this._setResumableProgress(a2, r2, d), n = Math.floor(100 * p / u), f.pendingBytes = u - p, this._setResumableProgress(n, f);
          } else o.setProgress(i2, a2), s2 = d && d.length ? d.find(".file-thumb-progress") : null, this._setProgress(a2, s2, null, this._getStats(r2)), e.each(o.stats, function(e2, t2) {
            c += t2.loaded;
          }), f.pendingBytes = u - c, n = t.round(c / u * 100), this._setProgress(n, null, null, this._getStats(f));
        }
      }, _validateMinCount: function() {
        var e2 = this.isAjaxUpload ? this.fileManager.count() : this._inputFileCount();
        return !(this.validateInitialCount && this.minFileCount > 0 && this._getFileCount(e2 - 1) < this.minFileCount) || (this._noFilesError({}), false);
      }, _getFileCount: function(e2, t2) {
        return void 0 === t2 && (t2 = this.validateInitialCount && !this.overwriteInitial), t2 && (e2 += this.previewCache.count(true)), e2;
      }, _getFileId: function(e2) {
        return t.getFileId(e2, this.generateFileId);
      }, _getFileName: function(e2, i2) {
        var a2 = t.getFileName(e2);
        return a2 ? this.slug(a2) : i2;
      }, _getFileNames: function(e2) {
        return this.filenames.filter(function(t2) {
          return e2 ? void 0 !== t2 : null != t2;
        });
      }, _setPreviewError: function(e2, t2) {
        var i2 = this.removeFromPreviewOnError && !this.retryErrorUploads;
        t2 && !i2 || this.fileManager.remove(e2), this.showPreview && (i2 ? e2.remove() : (this._setThumbStatus(e2, "Error"), this._refreshUploadButton(e2)));
      }, _refreshUploadButton: function(e2) {
        var i2 = e2.find(".kv-file-upload"), a2 = this.fileActionSettings, r2 = a2.uploadIcon, s2 = a2.uploadTitle;
        i2.length && (this.retryErrorUploads && (r2 = a2.uploadRetryIcon, s2 = a2.uploadRetryTitle), i2.attr("title", s2), t.setHtml(i2, r2));
      }, _isValidSize: function(e2, i2, a2, r2, s2, n) {
        var o, l, d, c = this[("Small" === e2 ? "min" : "max") + "Image" + i2];
        return !(!t.isEmpty(c) && a2.length) || (d = a2[0], l = "Width" === i2 ? d.naturalWidth || d.width : d.naturalHeight || d.height, ("Small" === e2 ? l >= c : l <= c) || (o = this["msgImage" + i2 + e2] || 'Image "{name}" has a size validation error (limit "{size}").', this._showFileError(o.setTokens({ name: s2, size: c, dimension: l }), n), this._setPreviewError(r2), this.fileManager.remove(r2), this._clearFileInput(), false));
      }, _getExifObj: function(e2) {
        var i2, a2 = t.logMessages.exifWarning;
        if ("data:image/jpeg;base64," === e2.slice(0, 23) || "data:image/jpg;base64," === e2.slice(0, 22)) {
          try {
            i2 = window.piexif ? window.piexif.load(e2) : null;
          } catch (e3) {
            i2 = null, a2 = e3 && e3.message || "";
          }
          return !i2 && this.showExifErrorLog && this._log(t.logMessages.badExifParser, { details: a2 }), i2;
        }
        i2 = null;
      }, setImageOrientation: function(i2, a2, r2, s2) {
        var n, o, l, d = this, c = !i2 || !i2.length, u = !a2 || !a2.length, f = false, p = c && s2 && "image" === s2.attr("data-template");
        c && u || (l = "load.fileinputimageorient", p ? (i2 = a2, a2 = null, i2.css(d.previewSettings.image), o = t.createDiv().appendTo(s2.find(".kv-file-content")), n = e(document.createElement("span")).insertBefore(i2), i2.css("visibility", "hidden").removeClass("file-zoom-detail").appendTo(o)) : f = !i2.is(":visible"), i2.off(l).on(l, function() {
          f && (d.$preview.removeClass("hide-content"), s2.find(".kv-file-content").css("visibility", "hidden"));
          var e2 = i2[0], l2 = a2 && a2.length ? a2[0] : null, c2 = e2.offsetHeight, u2 = e2.offsetWidth, h = t.getRotation(r2);
          if (f && (s2.find(".kv-file-content").css("visibility", "visible"), d.$preview.addClass("hide-content")), i2.data("orientation", r2), l2 && a2.data("orientation", r2), r2 < 5) return t.setTransform(e2, h), void t.setTransform(l2, h);
          var m = Math.atan(u2 / c2), g = Math.sqrt(Math.pow(c2, 2) + Math.pow(u2, 2)), v = g ? c2 / Math.cos(Math.PI / 2 + m) / g : 1, w = " scale(" + Math.abs(v) + ")";
          t.setTransform(e2, h + w), t.setTransform(l2, h + w), p && (i2.css("visibility", "visible").insertAfter(n).addClass("file-zoom-detail"), n.remove(), o.remove());
        }));
      }, _validateImageOrientation: function(i2, a2, r2, s2, n, o, l, d) {
        var c, u, f, p = this.autoOrientImage;
        if (c = this._getExifObj(d), this.canOrientImage) return i2.css("image-orientation", p ? "from-image" : "none"), void this._validateImage(r2, s2, n, o, l, d, c);
        f = t.getZoomSelector(r2, " img"), (u = c ? c["0th"][piexif.ImageIFD.Orientation] : null) ? (this.setImageOrientation(i2, e(f), u, this._getFrame(r2)), this._raise("fileimageoriented", { $img: i2, file: a2 }), this._validateImage(r2, s2, n, o, l, d, c)) : this._validateImage(r2, s2, n, o, l, d, c);
      }, _validateImage: function(e2, t2, i2, a2, r2, s2, n) {
        var o, l, d, c = this, u = c.$preview, f = c._getFrame(e2), p = f.attr("data-fileindex"), h = f.find("img");
        i2 = i2 || "Untitled", h.one("load", function() {
          h.data("validated") || (h.data("validated", true), l = f.width(), d = u.width(), l > d && h.css("width", "100%"), o = { ind: p, id: e2, fileId: t2 }, setTimeout(function() {
            var l2, d2;
            l2 = c._isValidSize("Small", "Width", h, f, i2, o), d2 = c._isValidSize("Small", "Height", h, f, i2, o), c.resizeImage || (l2 = l2 && c._isValidSize("Large", "Width", h, f, i2, o), d2 = d2 && c._isValidSize("Large", "Height", h, f, i2, o)), c._raise("fileimageloaded", [e2]), f.data("exif", n), l2 && d2 && (c.fileManager.addImage(t2, { ind: p, img: h, thumb: f, pid: e2, typ: a2, siz: r2, validated: false, imgData: s2, exifObj: n }), c._validateAllImages());
          }, c.processDelay));
        }).one("error", function() {
          c._raise("fileimageloaderror", [e2]);
        });
      }, _validateAllImages: function() {
        var t2, i2 = this, a2 = { val: 0 }, r2 = i2.fileManager.getImageCount(), s2 = i2.resizeIfSizeMoreThan;
        r2 === i2.fileManager.totalImages && (i2._raise("fileimagesloaded"), i2.resizeImage && e.each(i2.fileManager.loadedImages, function(e2, n) {
          n.validated || ((t2 = n.siz) && t2 > s2 * i2.bytesToKB && i2._getResizedImage(e2, n, a2, r2), n.validated = true);
        }));
      }, _getResizedImage: function(i2, a2, r2, s2) {
        var n, o, l, d, c, u, f, p, h, m = this, g = e(a2.img)[0], v = g.naturalWidth, w = g.naturalHeight, b = 1, _ = m.maxImageWidth || v, C = m.maxImageHeight || w, x = !(!v || !w), y = m.imageCanvas, T = m.imageCanvasContext, P = a2.typ, F = a2.pid, k = a2.ind, S = a2.thumb, I = a2.exifObj;
        if (c = function(e2, t2, i3) {
          m.isAjaxUpload ? m._showFileError(e2, t2, i3) : m._showError(e2, t2, i3), m._setPreviewError(S);
        }, p = { id: F, index: k, fileId: i2 }, h = [i2, F, k], (f = m.fileManager.getFile(i2)) && x && !(v <= _ && w <= C) || (x && f && m._raise("fileimageresized", h), r2.val++, r2.val === s2 && m._raise("fileimagesresized"), x)) {
          P = P || m.resizeDefaultImageType, o = v > _, l = w > C, b = "width" === m.resizePreference ? o ? _ / v : l ? C / w : 1 : l ? C / w : o ? _ / v : 1, m._resetCanvas(), v *= b, w *= b, y.width = v, y.height = w;
          try {
            T.drawImage(g, 0, 0, v, w), d = y.toDataURL(P, m.resizeQuality), I && (u = window.piexif.dump(I), d = window.piexif.insert(u, d)), n = t.dataURI2Blob(d), m.fileManager.setFile(i2, n), m._raise("fileimageresized", h), r2.val++, r2.val === s2 && m._raise("fileimagesresized", [void 0, void 0]), n instanceof Blob || c(m.msgImageResizeError, p, "fileimageresizeerror");
          } catch (e2) {
            r2.val++, r2.val === s2 && m._raise("fileimagesresized", [void 0, void 0]), c(m.msgImageResizeException.replace("{errors}", e2.message), p, "fileimageresizeexception");
          }
        } else c(m.msgImageResizeError, p, "fileimageresizeerror");
      }, _showProgress: function() {
        this.$progress && this.$progress.length && this.$progress.show();
      }, _hideProgress: function() {
        this.$progress && this.$progress.length && this.$progress.hide();
      }, _initBrowse: function(e2) {
        var i2 = this.$element;
        this.showBrowse ? this.$btnFile = e2.find(".btn-file").append(i2) : (i2.appendTo(e2).attr("tabindex", -1), t.addCss(i2, "file-no-browse"));
      }, _initClickable: function() {
        var i2, a2, r2 = this;
        r2.isClickable && (i2 = r2.$dropZone, r2.isAjaxUpload || (a2 = r2.$preview.find(".file-default-preview")).length && (i2 = a2), t.addCss(i2, "clickable"), i2.attr("tabindex", -1), r2._handler(i2, "click", function(t2) {
          var a3 = e(t2.target);
          r2.$errorContainer.is(":visible") || a3.parents(".file-preview-thumbnails").length && !a3.parents(".file-default-preview").length || (r2.$element.data("zoneClicked", true).trigger("click"), i2.blur());
        }));
      }, _initCaption: function() {
        var e2 = this.initialCaption || "";
        return this.overwriteInitial || t.isEmpty(e2) ? (this.$caption.val(""), false) : (this._setCaption(e2), true);
      }, _setCaption: function(i2, a2) {
        var r2, s2, n, o, l, d;
        if (this.$caption.length) {
          if (this.$captionContainer.removeClass("icon-visible"), a2) r2 = e("<div>" + this.msgValidationError + "</div>").text(), (o = this.fileManager.count()) ? (d = this.fileManager.getFirstFile(), l = 1 === o && d ? d.nameFmt : this._getMsgSelected(o)) : l = this._getMsgSelected(this.msgNo), s2 = t.isEmpty(i2) ? l : i2, n = '<span class="' + this.msgValidationErrorClass + '">' + this.msgValidationErrorIcon + "</span>";
          else {
            if (t.isEmpty(i2)) return void this.$caption.attr("title", "");
            s2 = r2 = e("<div>" + i2 + "</div>").text(), n = this._getLayoutTemplate("fileIcon");
          }
          this.$captionContainer.addClass("icon-visible"), this.$caption.attr("title", r2).val(s2), t.setHtml(this.$captionIcon, n);
        }
      }, _createContainer: function() {
        var e2 = { class: "file-input file-input-new" + (this.rtl ? " kv-rtl" : "") }, i2 = t.createElement(t.cspBuffer.stash(this._renderMain()));
        return t.cspBuffer.apply(i2), i2.insertBefore(this.$element).attr(e2), this._initBrowse(i2), this.theme && i2.addClass("theme-" + this.theme), i2;
      }, _refreshContainer: function() {
        var e2 = this.$container;
        this.$element.insertAfter(e2), t.setHtml(e2, this._renderMain()), this._initBrowse(e2), this._validateDisabled();
      }, _validateDisabled: function() {
        this.$caption.attr({ readonly: this.isDisabled });
      }, _setTabIndex: function(e2, t2) {
        var i2 = this.tabIndexConfig[e2];
        return t2.setTokens({ tabIndexConfig: null == i2 ? "" : 'tabindex="' + i2 + '"' });
      }, _renderMain: function() {
        var e2 = this.dropZoneEnabled ? " file-drop-zone" : "file-drop-disabled", t2 = this.showClose ? this._getLayoutTemplate("close") : "", i2 = this.showPreview ? this._getLayoutTemplate("preview").setTokens({ class: this.previewClass, dropClass: e2 }) : "", a2 = this.isDisabled ? this.captionClass + " file-caption-disabled" : this.captionClass, r2 = this.captionTemplate.setTokens({ class: a2 + " kv-fileinput-caption" });
        return r2 = this._setTabIndex("caption", r2), this.mainTemplate.setTokens({ class: this.mainClass + (!this.showBrowse && this.showCaption ? " no-browse" : ""), inputGroupClass: this.inputGroupClass, preview: i2, close: t2, caption: r2, upload: this._renderButton("upload"), remove: this._renderButton("remove"), cancel: this._renderButton("cancel"), pause: this._renderButton("pause"), browse: this._renderButton("browse") });
      }, _renderButton: function(e2) {
        var i2 = this._getLayoutTemplate("btnDefault"), a2 = this[e2 + "Class"], r2 = this[e2 + "Title"], s2 = this[e2 + "Icon"], n = this[e2 + "Label"], o = this.isDisabled ? " disabled" : "", l = "button";
        switch (e2) {
          case "remove":
            if (!this.showRemove) return "";
            break;
          case "cancel":
            if (!this.showCancel) return "";
            a2 += " kv-hidden";
            break;
          case "pause":
            if (!this.showPause) return "";
            a2 += " kv-hidden";
            break;
          case "upload":
            if (!this.showUpload) return "";
            this.isAjaxUpload && !this.isDisabled ? i2 = this._getLayoutTemplate("btnLink").replace("{href}", this.uploadUrl) : l = "submit";
            break;
          case "browse":
            if (!this.showBrowse) return "";
            i2 = this._getLayoutTemplate("btnBrowse");
            break;
          default:
            return "";
        }
        return i2 = this._setTabIndex(e2, i2), a2 += "browse" === e2 ? " btn-file" : " fileinput-" + e2 + " fileinput-" + e2 + "-button", t.isEmpty(n) || (n = ' <span class="' + this.buttonLabelClass + '">' + n + "</span>"), i2.setTokens({ type: l, css: a2, title: r2, status: o, icon: s2, label: n });
      }, _renderThumbProgress: function() {
        return '<div class="file-thumb-progress kv-hidden">' + this.progressInfoTemplate.setTokens({ percent: 101, status: this.msgUploadBegin, stats: "" }) + "</div>";
      }, _renderFileFooter: function(e2, i2, a2, r2, s2) {
        var n, o, l = this.fileActionSettings, d = l.showRemove, c = l.showDrag, u = l.showUpload, f = l.showRotate, p = l.showZoom, h = this._getLayoutTemplate("footer"), m = this._getLayoutTemplate("indicator"), g = s2 ? l.indicatorError : l.indicatorNew, v = s2 ? l.indicatorErrorTitle : l.indicatorNewTitle, w = m.setTokens({ indicator: g, indicatorTitle: v });
        return o = { type: e2, caption: i2, size: a2 = this._getSize(a2), width: r2, progress: "", indicator: w }, this.isAjaxUpload ? (o.progress = this._renderThumbProgress(), o.actions = this._renderFileActions(o, u, false, d, f, p, c, false, false, false)) : o.actions = this._renderFileActions(o, false, false, false, false, p, c, false, false, false), n = h.setTokens(o), n = t.replaceTags(n, this.previewThumbTags);
      }, _renderFileActions: function(e2, t2, i2, a2, r2, s2, n, o, l, d, c, u, f) {
        if (!e2.type && c && (e2.type = "image"), this.enableResumableUpload ? t2 = false : "function" == typeof t2 && (t2 = t2(e2)), "function" == typeof i2 && (i2 = i2(e2)), "function" == typeof a2 && (a2 = a2(e2)), "function" == typeof s2 && (s2 = s2(e2)), "function" == typeof n && (n = n(e2)), "function" == typeof r2 && (r2 = r2(e2)), !(t2 || i2 || a2 || r2 || s2 || n)) return "";
        var p, h = false === l ? "" : ' data-url="' + l + '"', m = "", g = "", v = "", w = false === d ? "" : ' data-key="' + d + '"', b = "", _ = "", C = "", x = this._getLayoutTemplate("actions"), y = this.fileActionSettings, T = this.otherActionButtons.setTokens({ dataKey: w, key: d }), P = o ? y.removeClass + " disabled" : y.removeClass;
        return a2 && (b = this._getLayoutTemplate("actionDelete").setTokens({ removeClass: P, removeIcon: y.removeIcon, removeTitle: y.removeTitle, dataUrl: h, dataKey: w, key: d })), r2 && (v = this._getLayoutTemplate("actionRotate").setTokens({ rotateClass: y.rotateClass, rotateIcon: y.rotateIcon, rotateTitle: y.rotateTitle })), t2 && (_ = this._getLayoutTemplate("actionUpload").setTokens({ uploadClass: y.uploadClass, uploadIcon: y.uploadIcon, uploadTitle: y.uploadTitle })), i2 && (C = (C = this._getLayoutTemplate("actionDownload").setTokens({ downloadClass: y.downloadClass, downloadIcon: y.downloadIcon, downloadTitle: y.downloadTitle, downloadUrl: u || this.initialPreviewDownloadUrl })).setTokens({ filename: f, key: d })), s2 && (m = this._getLayoutTemplate("actionZoom").setTokens({ zoomClass: y.zoomClass, zoomIcon: y.zoomIcon, zoomTitle: y.zoomTitle })), n && c && (p = "drag-handle-init " + y.dragClass, g = this._getLayoutTemplate("actionDrag").setTokens({ dragClass: p, dragTitle: y.dragTitle, dragIcon: y.dragIcon })), x.setTokens({ delete: b, upload: _, download: C, rotate: v, zoom: m, drag: g, other: T });
      }, _browse: function(e2) {
        e2 && e2.isDefaultPrevented() || !this._raise("filebrowse") || (this.isError && !this.isAjaxUpload && this.clear(), this.focusCaptionOnBrowse && this.$captionContainer.focus());
      }, _change: function(i2) {
        var a2 = this;
        if (e(document.body).off("focusin.fileinput focusout.fileinput"), a2.changeTriggered) a2._toggleLoading("hide");
        else {
          a2._toggleLoading("show");
          var r2, s2, n, o, l = a2.$element, d = arguments.length > 1, c = a2.isAjaxUpload, u = d ? arguments[1] : l[0].files, f = a2.fileManager.count(), p = t.isEmpty(l.attr("multiple")), h = !c && p ? 1 : a2.maxFileCount, m = a2.maxTotalFileCount, g = m > 0 && m > h, v = p && f > 0, w = function(t2, i3, r3) {
            var s3, n2, o2, l2, d2, f2, p2 = r3 ? a2.msgTotalFilesTooMany : a2.msgFilesTooMany;
            p2 = p2.replace("{m}", i3).replace("{n}", t2), a2.isError = (s3 = p2, n2 = null, o2 = null, l2 = null, d2 = e.extend(true, {}, a2._getOutData(null, {}, {}, u), { id: o2, index: l2 }), f2 = { id: o2, index: l2, file: n2, files: u }, a2.isPersistentError = true, a2._toggleLoading("hide"), c ? a2._showFileError(s3, d2) : a2._showError(s3, f2)), a2.$captionContainer.removeClass("icon-visible"), a2._setCaption("", true), a2.$container.removeClass("file-input-new file-input-ajax-new");
          };
          if (a2.reader = null, a2._resetUpload(), a2._hideFileIcon(), a2.dropZoneEnabled && a2.$container.find(".file-drop-zone ." + a2.dropZoneTitleClass).remove(), c || (u = i2.target && void 0 === i2.target.files ? i2.target.value ? [{ name: i2.target.value.replace(/^.+\\/, "") }] : [] : i2.target.files || {}), r2 = u, t.isEmpty(r2) || 0 === r2.length) return c || a2.clear(), void a2._raise("fileselectnone");
          if (a2._resetErrors(), o = r2.length, n = c ? a2.fileManager.count() + o : o, s2 = a2._getFileCount(n, !g && void 0), h > 0 && s2 > h) {
            if (!a2.autoReplace || o > h) return void w(a2.autoReplace && o > h ? o : s2, h);
            s2 > h && a2._resetPreviewThumbs(c);
          } else {
            if (g && (s2 = a2._getFileCount(n, true), m > 0 && s2 > m)) {
              if (!a2.autoReplace || o > h) return void w(a2.autoReplace && o > m ? o : s2, m, true);
              s2 > h && a2._resetPreviewThumbs(c);
            }
            !c || v ? (a2._resetPreviewThumbs(false), v && a2.clearFileStack()) : !c || 0 !== f || a2.previewCache.count(true) && !a2.overwriteInitial || a2._resetPreviewThumbs(true);
          }
          a2.autoReplace && a2._getThumbs().each(function() {
            var t2 = e(this);
            (t2.hasClass("file-preview-success") || t2.hasClass("file-preview-error")) && t2.remove();
          }), a2.readFiles(r2), a2._toggleLoading("hide");
        }
      }, _abort: function(t2) {
        var i2;
        return this.ajaxAborted && "object" == typeof this.ajaxAborted && void 0 !== this.ajaxAborted.message ? ((i2 = e.extend(true, {}, this._getOutData(null), t2)).abortData = this.ajaxAborted.data || {}, i2.abortMessage = this.ajaxAborted.message, this._setProgress(101, this.$progress, this.msgCancelled), this._showFileError(this.ajaxAborted.message, i2, "filecustomerror"), this.cancel(), this.unlock(), true) : !!this.ajaxAborted;
      }, _resetFileStack: function() {
        var t2 = this, i2 = 0;
        t2._getThumbs().each(function() {
          var a2 = e(this), r2 = a2.attr("data-fileindex"), s2 = a2.attr("id");
          "-1" !== r2 && -1 !== r2 && (t2._getThumbFile(a2) ? a2.attr({ "data-fileindex": "-1" }) : (a2.attr({ "data-fileindex": i2 }), i2++), t2._getZoom(s2).attr({ "data-fileindex": a2.attr("data-fileindex") }));
        });
      }, _isFileSelectionValid: function(e2) {
        return e2 = e2 || 0, this.required && !this.getFilesCount() ? (this.$errorContainer.html(""), this._showFileError(this.msgFileRequired), false) : !(this.minFileCount > 0 && this._getFileCount(e2) < this.minFileCount) || (this._noFilesError({}), false);
      }, _canPreview: function(e2) {
        if (!(e2 && this.showPreview && this.$preview && this.$preview.length)) return false;
        var i2, a2, r2, s2 = e2.name || "", n = e2.type || "", o = (e2.size || 0) / this.bytesToKB, l = this._parseFileType(n, s2), d = this.allowedPreviewTypes, c = this.allowedPreviewMimeTypes, u = this.allowedPreviewExtensions || [], f = this.disabledPreviewTypes, p = this.disabledPreviewMimeTypes, h = this.disabledPreviewExtensions || [], m = this.maxFilePreviewSize && parseFloat(this.maxFilePreviewSize) || 0, g = new RegExp("\\.(" + u.join("|") + ")$", "i"), v = new RegExp("\\.(" + h.join("|") + ")$", "i");
        return i2 = !d || -1 !== d.indexOf(l), a2 = !c || -1 !== c.indexOf(n), r2 = !u.length || t.compare(s2, g), !(f && -1 !== f.indexOf(l) || p && -1 !== p.indexOf(n) || h.length && t.compare(s2, v) || m && !isNaN(m) && o > m) && (i2 || a2 || r2);
      }, addToStack: function(e2, t2) {
        this.stackIsUpdating = true, this.fileManager.add(e2, t2), this._refreshPreview(), this.stackIsUpdating = false;
      }, clearFileStack: function() {
        return this.fileManager.clear(), this._initResumableUpload(), this.enableResumableUpload ? (null === this.showPause && (this.showPause = true), null === this.showCancel && (this.showCancel = false)) : (this.showPause = false, null === this.showCancel && (this.showCancel = true)), this.$element;
      }, getFileStack: function() {
        return this.fileManager.stack;
      }, getFileList: function() {
        return this.fileManager.list();
      }, getFilesSize: function() {
        return this.fileManager.getTotalSize();
      }, getFilesCount: function(e2) {
        var t2 = this.isAjaxUpload ? this.fileManager.count() : this._inputFileCount();
        return e2 && (t2 += this.previewCache.count(true)), this._getFileCount(t2);
      }, _initCapStatus: function(e2) {
        var t2 = this.$caption;
        t2.removeClass("is-valid file-processing"), e2 && ("processing" === e2 ? t2.addClass("file-processing") : t2.addClass("is-valid"));
      }, _toggleLoading: function(e2) {
        t.setHtml(this.$previewStatus, "hide" === e2 ? "" : this.msgProcessing), this.$container.removeClass("file-thumb-loading"), this._initCapStatus("hide" === e2 ? "" : "processing"), "hide" !== e2 && (this.dropZoneEnabled && this.$container.find(".file-drop-zone ." + this.dropZoneTitleClass).remove(), this.$container.addClass("file-thumb-loading"));
      }, _initFileSelected: function() {
        var t2 = this, i2 = t2.$element, a2 = e(document.body), r2 = "focusin.fileinput focusout.fileinput";
        a2.length ? a2.off(r2).on("focusout.fileinput", function() {
          t2._toggleLoading("show");
        }).on("focusin.fileinput", function() {
          setTimeout(function() {
            i2.val() || t2._setFileDropZoneTitle(), a2.off(r2), t2._toggleLoading("hide");
          }, 2500);
        }) : t2._toggleLoading("hide");
      }, readFiles: function(i2) {
        this.reader = new FileReader();
        var a2, r2 = this, s2 = r2.reader, n = r2.$previewContainer, o = r2.$previewStatus, l = r2.msgLoading, d = r2.msgProgress, c = r2.previewInitId, u = i2.length, f = r2.fileTypeSettings, p = r2.allowedFileTypes, h = p ? p.length : 0, m = r2.allowedFileExtensions, g = t.isEmpty(m) ? "" : m.join(", "), v = function(t2, s3, n2, o2, l2) {
          var d2, c2 = e.extend(true, {}, r2._getOutData(null, {}, {}, i2), { id: n2, index: o2, fileId: l2 }), f2 = { id: n2, index: o2, fileId: l2, file: s3, files: i2 };
          Object.values(i2).forEach((e2) => {
            r2._previewDefault(e2, true);
          }), d2 = r2._getFrame(n2, true), r2._toggleLoading("hide"), r2.isAjaxUpload ? setTimeout(function() {
            a2(o2 + 1);
          }, r2.processDelay) : (r2.unlock(), u = 0), r2.removeFromPreviewOnError && d2.length ? d2.remove() : (r2._initFileActions(), d2.find(".kv-file-upload").remove()), r2.isPersistentError = true, r2.isError = r2.isAjaxUpload ? r2._showFileError(t2, c2) : r2._showError(t2, f2), r2._updateFileDetails(u);
        };
        r2.fileManager.clearImages(), e.each(i2, function(e2, t2) {
          var i3 = r2.fileTypeSettings.image;
          i3 && i3(t2.type) && r2.fileManager.totalImages++;
        }), (a2 = function(w) {
          var b, _ = r2.$errorContainer, C = r2.fileManager;
          if (w >= u) return r2.unlock(), r2.duplicateErrors.length && (b = "<li>" + r2.duplicateErrors.join("</li><li>") + "</li>", 0 === _.find("ul").length ? t.setHtml(_, r2.errorCloseButton + "<ul>" + b + "</ul>") : (_.find("ul").append(t.cspBuffer.stash(b)), t.cspBuffer.apply(_)), _.fadeIn(r2.fadeDelay), r2._handler(_.find(".kv-error-close"), "click", function() {
            _.fadeOut(r2.fadeDelay);
          }), r2.duplicateErrors = []), r2.isAjaxUpload ? (r2._raise("filebatchselected", [C.stack]), 0 !== C.count() || r2.isError || r2.reset()) : r2._raise("filebatchselected", [i2]), n.removeClass("file-thumb-loading"), r2._initCapStatus("valid"), void o.html("");
          r2.lock(true);
          var x, y, T, P, F, k, S, I, E, A, z, D, j, U, $, M, R = i2[w], B = R && R.size || 0, O = r2._getSize(B, true), L = f.image, N = B / r2.bytesToKB, Z = "", H = 0, W = "", V = false, q = 0;
          if (M = function(e2) {
            e2 = e2 || R, x = D = r2._getFileId(R), y = c + "-" + x, z = t.createObjectURL(e2), A = r2._getFileName(R, "");
          }, $ = function() {
            var e2 = !!C.loadedImages[x], i3 = d.setTokens({ index: w + 1, files: u, percent: 50, name: A });
            setTimeout(function() {
              t.setHtml(o, i3), r2._updateFileDetails(u), r2.getFilesCount(true) > 0 && r2.getFrames(":visible") && r2.$dropZone.find("." + r2.dropZoneTitleClass).remove(), a2(w + 1);
            }, r2.processDelay), r2._raise("fileloaded", [R, y, x, w, s2]) && r2.isAjaxUpload ? e2 || C.add(R) : e2 && C.removeFile(x);
          }, R) {
            if (M(), h > 0) for (P = 0; P < h; P++) I = p[P], E = r2.msgFileTypes[I] || I, W += 0 === P ? E : ", " + E;
            if (false !== A) {
              if (0 === A.length) return F = r2.msgInvalidFileName.replace("{name}", t.htmlEncode(t.getFileName(R), "[unknown]")), void v(F, R, y, w, D);
              if (t.isEmpty(m) || (Z = new RegExp("\\.(" + m.join("|") + ")$", "i")), r2.isAjaxUpload && C.exists(D) || r2._getFrame(y, true).length) {
                var K = { id: y, index: w, fileId: D, file: R, files: i2 };
                return F = r2.msgDuplicateFile.setTokens({ name: A, size: O }), void (r2.isAjaxUpload ? (r2.stackIsUpdating || (r2.duplicateErrors.push(F), r2.isDuplicateError = true, r2._raise("fileduplicateerror", [R, D, A, O, y, w])), a2(w + 1), r2._updateFileDetails(u)) : (r2._showError(F, K), r2.unlock(), u = 0, r2._clearFileInput(), r2.reset(), r2._updateFileDetails(u)));
              }
              if (r2.maxMultipleFileSize > 0 && i2.length > 1) {
                var G = [], Y = 0;
                if (Object.values(i2).forEach((e2) => {
                  Y += e2.size / r2.bytesToKB, G.push(e2.name);
                }), Y > r2.maxMultipleFileSize) return F = r2.msgMultipleSizeTooLarge.setTokens({ name: G, size: r2._getSize(Y, true), maxSize: r2._getSize(r2.maxMultipleFileSize * r2.bytesToKB, true) }), void v(F, R, y, w, D);
              } else if (r2.maxFileSize > 0 && N > r2.maxFileSize) return F = r2.msgSizeTooLarge.setTokens({ name: A, size: O, maxSize: r2._getSize(r2.maxFileSize * r2.bytesToKB, true) }), void v(F, R, y, w, D);
              if (null !== r2.minFileSize && N <= t.getNum(r2.minFileSize)) return F = r2.msgSizeTooSmall.setTokens({ name: A, size: O, minSize: r2._getSize(r2.minFileSize * r2.bytesToKB, true) }), void v(F, R, y, w, D);
              if (!t.isEmpty(p) && t.isArray(p)) {
                for (P = 0; P < p.length; P += 1) S = p[P], H += (U = f[S]) && "function" == typeof U && U(R.type, t.getFileName(R)) ? 1 : 0;
                if (0 === H) return F = r2.msgInvalidFileType.setTokens({ name: A, types: W }), void v(F, R, y, w, D);
              }
              if (0 === H && !t.isEmpty(m) && t.isArray(m) && !t.isEmpty(Z) && (k = t.compare(A, Z), 0 === (H += t.isEmpty(k) ? 0 : k.length))) return F = r2.msgInvalidFileExtension.setTokens({ name: A, extensions: g }), void v(F, R, y, w, D);
              if (!r2._canPreview(R)) return j = r2._raise("filebeforeload", [R, w, s2]), r2.isAjaxUpload && j && C.add(R), r2.showPreview && j && (n.addClass("file-thumb-loading"), r2._initCapStatus("processing"), r2._previewDefault(R), r2._initFileActions()), void setTimeout(function() {
                j && r2._updateFileDetails(u), a2(w + 1), r2._raise("fileloaded", [R, y, x, w]);
              }, 10);
              L(R.type, A), t.setHtml(o, l.replace("{index}", w + 1).replace("{files}", u)), n.addClass("file-thumb-loading"), r2._initCapStatus("processing"), s2.onerror = function(e2) {
                r2._errorHandler(e2, A);
              }, s2.onload = function(i3) {
                var a3, l2, d2, c2, u2, p2, h2 = [], m2 = function(e2, d3) {
                  if (t.isEmpty(e2) && (u2 = t.arrayBuffer2String(s2.result), e2 = t.isSvg(u2) ? "image/svg+xml" : t.getMimeType(a3, u2, R.type)), l2 = { name: A, type: e2 || "" }, d3 && "undefined" != typeof File) try {
                    var c3 = l2.filename = A + "." + d3;
                    T = new File([R], c3, { type: l2.type }), M(T);
                  } catch (e3) {
                  }
                  if (L(e2, "")) {
                    var f2 = new FileReader();
                    return f2.onerror = function(e3) {
                      r2._errorHandler(e3, A);
                    }, f2.onload = function(e3) {
                      if (r2.isAjaxUpload && !r2._raise("filebeforeload", [R, w, s2])) return V = true, r2._resetCaption(), s2.abort(), o.html(""), n.removeClass("file-thumb-loading"), r2._initCapStatus("valid"), void r2.enable();
                      r2._previewFile(w, R, e3, z, l2), r2._initFileActions(), $();
                    }, void f2.readAsDataURL(R);
                  }
                  if (r2.isAjaxUpload && !r2._raise("filebeforeload", [R, w, s2])) return V = true, r2._resetCaption(), s2.abort(), o.html(""), n.removeClass("file-thumb-loading"), r2._initCapStatus("valid"), void r2.enable();
                  r2._previewFile(w, R, i3, z, l2), r2._initFileActions(), $();
                };
                if (p2 = R.type, l2 = { name: A, type: p2 }, e.each(f, function(e2, t2) {
                  "object" !== e2 && "other" !== e2 && "function" == typeof t2 && t2(p2, A) && q++;
                }), "undefined" != typeof FileTypeParser) d2 = new Uint8Array(i3.target.result), new FileTypeParser().parse(d2).then(function(e2) {
                  m2(e2 && e2.mime || p2, e2 && e2.ext || "");
                });
                else {
                  if (0 === q) {
                    for (d2 = new Uint8Array(i3.target.result), P = 0; P < d2.length; P++) c2 = d2[P].toString(16), h2.push(c2);
                    a3 = h2.join("").toLowerCase().substring(0, 8), p2 = t.getMimeType(a3, "", "");
                  }
                  m2(p2);
                }
              }, s2.onprogress = function(e2) {
                if (e2.lengthComputable) {
                  var i3 = e2.loaded / e2.total * 100, a3 = Math.ceil(i3);
                  F = d.setTokens({ index: w + 1, files: u, percent: a3, name: A }), setTimeout(function() {
                    V || t.setHtml(o, F);
                  }, r2.processDelay);
                }
              }, s2.readAsArrayBuffer(R);
            } else a2(w + 1);
          }
        })(0), r2._updateFileDetails(u);
      }, lock: function(e2) {
        var t2 = this.$container;
        return this._resetErrors(), this.disable(), !e2 && this.showCancel && t2.find(".fileinput-cancel").show(), !e2 && this.showPause && t2.find(".fileinput-pause").show(), this._initCapStatus("processing"), this._raise("filelock", [this.fileManager.stack, this._getExtraData()]), this.$element;
      }, unlock: function(e2) {
        var t2 = this.$container;
        return void 0 === e2 && (e2 = true), this.enable(), t2.removeClass("is-locked"), this.showCancel && t2.find(".fileinput-cancel").hide(), this.showPause && t2.find(".fileinput-pause").hide(), e2 && this._resetFileStack(), this._initCapStatus(), this._raise("fileunlock", [this.fileManager.stack, this._getExtraData()]), this.$element;
      }, resume: function() {
        var e2 = this.fileManager, t2 = false, i2 = this.resumableManager;
        return e2.bpsLog = [], e2.bps = 0, this.enableResumableUpload ? (this.paused ? this._toggleResumableProgress(this.progressPauseTemplate, this.msgUploadResume) : t2 = true, this.paused = false, t2 && this._toggleResumableProgress(this.progressInfoTemplate, this.msgUploadBegin), setTimeout(function() {
          i2.upload();
        }, this.processDelay), this.$element) : this.$element;
      }, paste: function(e2) {
        var t2 = e2.clipboardData || e2.originalEvent.clipboardData;
        return this._addFilesFromSystem(e2, t2, "filePaste"), this.$element;
      }, pause: function() {
        var t2, i2 = this, a2 = i2.resumableManager, r2 = i2.ajaxRequests, s2 = r2.length, n = a2.getProgress(), o = i2.fileActionSettings, l = i2.taskManager.getPool(a2.id);
        if (!i2.enableResumableUpload) return i2.$element;
        if (l && l.cancel(), i2._raise("fileuploadpaused", [i2.fileManager, a2]), s2 > 0) for (t2 = 0; t2 < s2; t2 += 1) i2.paused = true, r2[t2].abort();
        return i2.showPreview && i2._getThumbs().each(function() {
          var t3, a3 = e(this), r3 = i2._getLayoutTemplate("stats"), s3 = a3.find(".file-upload-indicator");
          a3.removeClass("file-uploading"), s3.attr("title") === o.indicatorLoadingTitle && (i2._setThumbStatus(a3, "Paused"), t3 = r3.setTokens({ pendingTime: i2.msgPaused, uploadSpeed: "" }), i2.paused = true, i2._setProgress(n, a3.find(".file-thumb-progress"), n + "%", t3)), i2._getThumbFile(a3) || a3.find(".kv-file-remove").removeClass("disabled").removeAttr("disabled");
        }), i2._setProgress(101, i2.$progress, i2.msgPaused), i2.$element;
      }, cancel: function() {
        var t2, i2 = this, a2 = i2.ajaxRequests, r2 = i2.resumableManager, s2 = i2.taskManager, n = r2 ? s2.getPool(r2.id) : void 0, o = a2.length;
        if (i2.enableResumableUpload && n ? (n.cancel().done(function() {
          i2._setProgressCancelled();
        }), r2.reset(), i2._raise("fileuploadcancelled", [i2.fileManager, r2])) : (i2.ajaxPool && i2.ajaxPool.cancel(), i2._raise("fileuploadcancelled", [i2.fileManager])), i2._initAjax(), o > 0) for (t2 = 0; t2 < o; t2 += 1) i2.cancelling = true, a2[t2].abort();
        return i2._getThumbs().each(function() {
          var t3 = e(this), a3 = t3.find(".file-thumb-progress");
          t3.removeClass("file-uploading"), i2._setProgress(0, a3), a3.hide(), i2._getThumbFile(t3) || (t3.find(".kv-file-upload").removeClass("disabled").removeAttr("disabled"), t3.find(".kv-file-remove").removeClass("disabled").removeAttr("disabled")), i2.unlock();
        }), setTimeout(function() {
          i2._setProgressCancelled();
        }, i2.processDelay), i2.$element;
      }, clear: function() {
        var i2, a2 = this;
        if (a2._raise("fileclear")) return a2.clearInput = true, a2.$btnUpload.removeAttr("disabled"), a2._getThumbs().find("video,audio,img").each(function() {
          t.cleanMemory(e(this));
        }), a2._clearFileInput(), a2._resetUpload(), a2.clearFileStack(), a2.isDuplicateError = false, a2.isPersistentError = false, a2._resetErrors(true), a2._hasInitialPreview() ? (a2._showFileIcon(), a2._resetPreview(), a2._initPreviewActions(), a2.$container.removeClass("file-input-new")) : (a2._getThumbs().each(function() {
          a2._clearObjects(e(this));
        }), a2.isAjaxUpload && (a2.previewCache.data = {}), a2.$preview.html(""), i2 = !a2.overwriteInitial && a2.initialCaption.length > 0 ? a2.initialCaption : "", a2.$caption.attr("title", "").val(i2), t.addCss(a2.$container, "file-input-new"), a2._validateDefaultPreview()), 0 === a2.$container.find(t.FRAMES).length && (a2._initCaption() || a2.$captionContainer.removeClass("icon-visible")), a2._hideFileIcon(), a2.focusCaptionOnClear && a2.$captionContainer.focus(), a2._setFileDropZoneTitle(), a2._raise("filecleared"), a2.$element;
      }, reset: function() {
        if (this._raise("filereset")) return this.lastProgress = 0, this._resetPreview(), this.$container.find(".fileinput-filename").text(""), t.addCss(this.$container, "file-input-new"), this.getFrames().length && this.$container.removeClass("file-input-new"), this.clearFileStack(), this._setFileDropZoneTitle(), this.$element;
      }, disable: function() {
        var e2 = this.$container;
        return this.isDisabled = true, this._raise("filedisabled"), this.$element.attr("disabled", "disabled"), e2.addClass("is-locked"), t.addCss(e2.find(".btn-file"), "disabled"), e2.find(".kv-fileinput-caption").addClass("file-caption-disabled"), e2.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button").attr("disabled", true), this._initDragDrop(), this.$element;
      }, enable: function() {
        var e2 = this.$container;
        return this.isDisabled = false, this._raise("fileenabled"), this.$element.removeAttr("disabled"), e2.removeClass("is-locked"), e2.find(".kv-fileinput-caption").removeClass("file-caption-disabled"), e2.find(".fileinput-remove, .fileinput-upload, .file-preview-frame button").removeAttr("disabled"), e2.find(".btn-file").removeClass("disabled"), this._initDragDrop(), this.$element;
      }, upload: function() {
        var i2, a2, r2 = this, s2 = r2.fileManager, n = s2.count(), o = r2.taskManager, l = !e.isEmptyObject(r2._getExtraData());
        if (s2.bpsLog = [], s2.bps = 0, r2.isAjaxUpload && !r2.isDisabled && r2._isFileSelectionValid(n)) {
          if (r2.lastProgress = 0, r2._resetUpload(), 0 !== n || l) {
            if (r2.cancelling = false, r2.uploadInitiated = true, r2._showProgress(), r2.lock(), 0 === n && l) return r2._setProgress(2), void r2._uploadExtraOnly();
            if (r2.enableResumableUpload) return r2.resume();
            if (r2.uploadAsync || r2.enableResumableUpload) {
              if (a2 = r2._getOutData(null), !r2._checkBatchPreupload(a2)) return;
              r2.fileBatchCompleted = false, r2.uploadCache = [], e.each(r2.getFileStack(), function(e2) {
                var t2 = r2._getThumbId(e2);
                r2.uploadCache.push({ id: t2, content: null, config: null, tags: null, append: true });
              }), r2.$preview.find(".file-preview-initial").removeClass(t.SORT_CSS), r2._initSortable();
            }
            if (r2._setProgress(2), r2.hasInitData = false, r2.uploadAsync) {
              i2 = 0;
              var d = r2.ajaxPool = o.addPool(t.uniqId());
              return e.each(r2.getFileStack(), function(e2) {
                d.addTask(e2 + i2, function(t2) {
                  r2._uploadSingle(i2, e2, true, t2);
                }), i2++;
              }), void d.run(r2.maxAjaxThreads).done(function() {
                r2._log("Async upload batch completed successfully."), r2._raise("filebatchuploadsuccess", [s2.stack, r2._getExtraData()]);
              }).fail(function() {
                r2._log("Async upload batch completed with errors."), r2._raise("filebatchuploaderror", [s2.stack, r2._getExtraData()]);
              });
            }
            return r2._uploadBatch(), r2.$element;
          }
          r2._showFileError(r2.msgUploadEmpty);
        }
      }, destroy: function() {
        var t2 = this.$form, i2 = this.$container, a2 = this.$element, r2 = this.namespace;
        return e(document).off(r2), e(window).off(r2), t2 && t2.length && t2.off(r2), this.isAjaxUpload && this._clearFileInput(), this._cleanup(), this._initPreviewCache(), a2.insertBefore(i2).off(r2).removeData(), i2.off().remove(), a2;
      }, refresh: function(i2) {
        var a2 = this.$element;
        return i2 = "object" != typeof i2 || t.isEmpty(i2) ? this.options : e.extend(true, {}, this.options, i2), this._init(i2, true), this._listen(), a2;
      }, zoom: function(e2) {
        var t2 = this._getFrame(e2);
        this._showModal(t2);
      }, getExif: function(e2) {
        var t2 = this._getFrame(e2);
        return t2 && t2.data("exif") || null;
      }, getFrames: function(i2) {
        var a2;
        return i2 = i2 || "", a2 = this.$preview.find(t.FRAMES + i2), this.reversePreviewOrder && (a2 = e(a2.get().reverse())), a2;
      }, getPreview: function() {
        return { content: this.initialPreview, config: this.initialPreviewConfig, tags: this.initialPreviewThumbTags };
      } }, e.fn.fileinput = function(i2) {
        if (t.hasFileAPISupport() || t.isIE(9)) {
          var r2 = Array.apply(null, arguments), s2 = [];
          switch (r2.shift(), this.each(function() {
            var n = {}, o = {};
            "object" == typeof i2 && (n = e.extend(true, {}, e.fn.fileinput.defaults, i2), o = i2);
            var l, d = e(this), c = d.data("fileinput"), u = n.theme || d.data("theme") || e.fn.fileinput.defaults.theme, f = {}, p = {}, h = n.language || d.data("language") || e.fn.fileinput.defaults.language || "en";
            c || (u && (p = e.fn.fileinputThemes[u] || {}), "en" === h || t.isEmpty(e.fn.fileinputLocales[h]) || (f = e.fn.fileinputLocales[h] || {}), l = e.extend(true, {}, e.fn.fileinput.defaults, p, e.fn.fileinputLocales.en, f, o, d.data()), c = new a(this, l), d.data("fileinput", c)), "string" == typeof i2 && s2.push(c[i2].apply(c, r2));
          }), s2.length) {
            case 0:
              return this;
            case 1:
              return s2[0];
            default:
              return s2;
          }
        }
      };
      var r = "btn btn-sm btn-kv " + t.defaultButtonCss(), s = "btn " + t.defaultButtonCss();
      e.fn.fileinput.defaults = { language: "en", bytesToKB: 1024, showCaption: true, showBrowse: true, showPreview: true, showRemove: true, showUpload: true, showUploadStats: true, showCancel: null, showPause: null, showClose: true, showUploadedThumbs: true, showConsoleLogs: false, browseOnZoneClick: false, autoReplace: false, showDescriptionClose: true, autoOrientImage: function() {
        var e2 = window.navigator.userAgent, t2 = !!e2.match(/WebKit/i);
        return !(!!e2.match(/iP(od|ad|hone)/i) && t2 && !e2.match(/CriOS/i));
      }, autoOrientImageInitial: true, showExifErrorLog: false, required: false, rtl: false, hideThumbnailContent: false, encodeUrl: true, focusCaptionOnBrowse: true, focusCaptionOnClear: true, generateFileId: null, previewClass: "", captionClass: "", frameClass: "krajee-default", mainClass: "", inputGroupClass: "", mainTemplate: null, fileSizeGetter: null, initialCaption: "", initialPreview: [], initialPreviewDelimiter: "*$$*", initialPreviewAsData: false, initialPreviewFileType: "image", initialPreviewConfig: [], initialPreviewThumbTags: [], previewThumbTags: {}, initialPreviewShowDelete: true, initialPreviewDownloadUrl: "", removeFromPreviewOnError: false, deleteUrl: "", deleteExtraData: {}, overwriteInitial: true, sanitizeZoomCache: function(e2) {
        var i2 = t.createDiv();
        return t.setHtml(i2, e2), i2.find("input,textarea,select,datalist,form,.file-thumbnail-footer").remove(), i2.html();
      }, previewZoomButtonIcons: { prev: '<i class="bi-chevron-left"></i>', next: '<i class="bi-chevron-right"></i>', rotate: '<i class="bi-arrow-clockwise"></i>', toggleheader: '<i class="bi-arrows-expand"></i>', fullscreen: '<i class="bi-arrows-fullscreen"></i>', borderless: '<i class="bi-arrows-angle-expand"></i>', close: '<i class="bi-x-lg"></i>' }, previewZoomButtonClasses: { prev: "btn btn-default btn-outline-secondary btn-navigate", next: "btn btn-default btn-outline-secondary btn-navigate", rotate: r, toggleheader: r, fullscreen: r, borderless: r, close: r }, previewTemplates: {}, previewContentTemplates: {}, preferIconicPreview: false, preferIconicZoomPreview: false, alwaysPreviewFileExtensions: [], rotatableFileExtensions: ["jpg", "jpeg", "png", "gif"], allowedFileTypes: null, allowedFileExtensions: null, allowedPreviewTypes: void 0, allowedPreviewMimeTypes: null, allowedPreviewExtensions: null, disabledPreviewTypes: void 0, disabledPreviewExtensions: ["msi", "exe", "com", "zip", "rar", "app", "vb", "scr"], disabledPreviewMimeTypes: null, defaultPreviewContent: null, customLayoutTags: {}, customPreviewTags: {}, previewFileIcon: '<i class="bi-file-earmark-fill"></i>', previewFileIconClass: "file-other-icon", previewFileIconSettings: {}, previewFileExtSettings: {}, buttonLabelClass: "hidden-xs", browseIcon: '<i class="bi-folder2-open"></i> ', browseClass: "btn btn-primary", removeIcon: '<i class="bi-trash"></i>', removeClass: s, cancelIcon: '<i class="bi-slash-circle"></i>', cancelClass: s, pauseIcon: '<i class="bi-pause-fill"></i>', pauseClass: s, uploadIcon: '<i class="bi-upload"></i>', uploadClass: s, uploadUrl: null, uploadUrlThumb: null, uploadAsync: true, uploadParamNames: { chunkCount: "chunkCount", chunkIndex: "chunkIndex", chunkSize: "chunkSize", chunkSizeStart: "chunkSizeStart", chunksUploaded: "chunksUploaded", fileBlob: "fileBlob", fileId: "fileId", fileName: "fileName", fileRelativePath: "fileRelativePath", fileSize: "fileSize", retryCount: "retryCount" }, maxAjaxThreads: 5, fadeDelay: 800, processDelay: 100, bitrateUpdateDelay: 500, queueDelay: 10, progressDelay: 0, enableResumableUpload: false, resumableUploadOptions: { fallback: null, testUrl: null, chunkSize: 2048, maxThreads: 4, maxRetries: 3, showErrorLog: true, retainErrorHistory: false, skipErrorsAndProceed: false }, uploadExtraData: {}, zoomModalHeight: 485, minImageWidth: null, minImageHeight: null, maxImageWidth: null, maxImageHeight: null, resizeImage: false, resizePreference: "width", resizeQuality: 0.92, resizeDefaultImageType: "image/jpeg", resizeIfSizeMoreThan: 0, minFileSize: -1, maxFileSize: 0, maxMultipleFileSize: 0, maxFilePreviewSize: 25600, minFileCount: 0, maxFileCount: 0, maxTotalFileCount: 0, validateInitialCount: false, msgValidationErrorClass: "text-danger", msgValidationErrorIcon: '<i class="bi-exclamation-circle-fill"></i> ', msgErrorClass: "file-error-message", progressThumbClass: "progress-bar progress-bar-striped active progress-bar-animated", progressClass: "progress-bar bg-success progress-bar-success progress-bar-striped active progress-bar-animated", progressInfoClass: "progress-bar bg-info progress-bar-info progress-bar-striped active progress-bar-animated", progressCompleteClass: "progress-bar bg-success progress-bar-success", progressPauseClass: "progress-bar bg-primary progress-bar-primary progress-bar-striped active progress-bar-animated", progressErrorClass: "progress-bar bg-danger progress-bar-danger", progressUploadThreshold: 99, previewFileType: "image", elCaptionContainer: null, elCaptionText: null, elPreviewContainer: null, elPreviewImage: null, elPreviewStatus: null, elErrorContainer: null, errorCloseButton: void 0, slugCallback: null, dropZoneEnabled: true, dropZoneTitleClass: "file-drop-zone-title", fileActionSettings: {}, otherActionButtons: "", textEncoding: "UTF-8", preProcessUpload: null, ajaxSettings: {}, ajaxDeleteSettings: {}, showAjaxErrorDetails: true, mergeAjaxCallbacks: false, mergeAjaxDeleteCallbacks: false, retryErrorUploads: true, reversePreviewOrder: false, usePdfRenderer: function() {
        var e2 = !!window.MSInputMethodContext && !!document.documentMode;
        return !!navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/i) || e2;
      }, pdfRendererUrl: "", pdfRendererTemplate: '<iframe class="kv-preview-data file-preview-pdf" src="{renderer}?file={data}" {style}></iframe>', tabIndexConfig: { browse: 500, remove: 500, upload: 500, cancel: null, pause: null, modal: -1 } }, e.fn.fileinputLocales.en = { sizeUnits: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], bitRateUnits: ["B/s", "KB/s", "MB/s", "GB/s", "TB/s", "PB/s", "EB/s", "ZB/s", "YB/s"], fileSingle: "file", filePlural: "files", browseLabel: "Browse &hellip;", removeLabel: "Remove", removeTitle: "Clear all unprocessed files", cancelLabel: "Cancel", cancelTitle: "Abort ongoing upload", pauseLabel: "Pause", pauseTitle: "Pause ongoing upload", uploadLabel: "Upload", uploadTitle: "Upload selected files", msgNo: "No", msgNoFilesSelected: "No files selected", msgCancelled: "Cancelled", msgPaused: "Paused", msgPlaceholder: "Select {files} ...", msgZoomModalHeading: "Detailed Preview", msgFileRequired: "You must select a file to upload.", msgSizeTooSmall: 'File "{name}" (<b>{size}</b>) is too small and must be larger than <b>{minSize}</b>.', msgSizeTooLarge: 'File "{name}" (<b>{size}</b>) exceeds maximum allowed upload size of <b>{maxSize}</b>.', msgMultipleSizeTooLarge: 'Files "{name}" (<b>{size}</b>) exceeds maximum allowed upload size of <b>{maxSize}</b>.', msgFilesTooLess: "You must select at least <b>{n}</b> {files} to upload.", msgFilesTooMany: "Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>.", msgTotalFilesTooMany: "You can upload a maximum of <b>{m}</b> files (<b>{n}</b> files detected).", msgFileNotFound: 'File "{name}" not found!', msgFileSecured: 'Security restrictions prevent reading the file "{name}".', msgFileNotReadable: 'File "{name}" is not readable.', msgFilePreviewAborted: 'File preview aborted for "{name}".', msgFilePreviewError: 'An error occurred while reading the file "{name}".', msgInvalidFileName: 'Invalid or unsupported characters in file name "{name}".', msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.', msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.', msgFileTypes: { image: "image", html: "HTML", text: "text", video: "video", audio: "audio", flash: "flash", pdf: "PDF", object: "object" }, msgUploadAborted: "The file upload was aborted", msgUploadThreshold: "Processing &hellip;", msgUploadBegin: "Initializing &hellip;", msgUploadEnd: "Done", msgUploadResume: "Resuming upload &hellip;", msgUploadEmpty: "No valid data available for upload.", msgUploadError: "Upload Error", msgDeleteError: "Delete Error", msgProgressError: "Error", msgValidationError: "Validation Error", msgLoading: "Loading file {index} of {files} &hellip;", msgProgress: "Loading file {index} of {files} - {name} - {percent}% completed.", msgSelected: "{n} {files} selected", msgProcessing: "Processing ...", msgFoldersNotAllowed: "Drag & drop files only! {n} folder(s) dropped were skipped.", msgImageWidthSmall: 'Width of image file "{name}" must be at least <b>{size} px</b> (detected <b>{dimension} px</b>).', msgImageHeightSmall: 'Height of image file "{name}" must be at least <b>{size} px</b> (detected <b>{dimension} px</b>).', msgImageWidthLarge: 'Width of image file "{name}" cannot exceed <b>{size} px</b> (detected <b>{dimension} px</b>).', msgImageHeightLarge: 'Height of image file "{name}" cannot exceed <b>{size} px</b> (detected <b>{dimension} px</b>).', msgImageResizeError: "Could not get the image dimensions to resize.", msgImageResizeException: "Error while resizing the image.<pre>{errors}</pre>", msgAjaxError: "Something went wrong with the {operation} operation. Please try again later!", msgAjaxProgressError: "{operation} failed", msgDuplicateFile: 'File "{name}" of same size "{size}" has already been selected earlier. Skipping duplicate selection.', msgResumableUploadRetriesExceeded: "Upload aborted beyond <b>{max}</b> retries for file <b>{file}</b>! Error Details: <pre>{error}</pre>", msgPendingTime: "{time} remaining", msgCalculatingTime: "calculating time remaining", ajaxOperations: { deleteThumb: "file delete", uploadThumb: "file upload", uploadBatch: "batch file upload", uploadExtra: "form data upload" }, dropZoneTitle: "Drag & drop files here &hellip;", dropZoneClickTitle: "<br>(or click to select {files})", previewZoomButtonTitles: { prev: "View previous file", next: "View next file", rotate: "Rotate 90 deg. clockwise", toggleheader: "Toggle header", fullscreen: "Toggle full screen", borderless: "Toggle borderless mode", close: "Close detailed preview" } }, e.fn.fileinput.Constructor = a, e(document).ready(function() {
        var t2 = e("input.file[type=file]");
        t2.length && t2.fileinput();
      });
    });
  }
});
export default require_fileinput_min();
/*! Bundled license information:

bootstrap-fileinput/js/fileinput.min.js:
  (*!
   * bootstrap-fileinput v5.5.4
   * http://plugins.krajee.com/file-input
   *
   * Author: Kartik Visweswaran
   * Copyright: 2014 - 2024, Kartik Visweswaran, Krajee.com
   *
   * Licensed under the BSD-3-Clause
   * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
   *)
*/
//# sourceMappingURL=bootstrap-fileinput_js_fileinput__min__js.js.map
